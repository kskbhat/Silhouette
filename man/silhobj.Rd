% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/silhobj.R
\name{silhobj}
\alias{silhobj}
\alias{plot.silhobj}
\title{Calculate Silhouette Width for Clustering}
\usage{
silhobj(
  pm,
  pmtype = c("sim", "dissim"),
  silhmethod = c("silh", "pac"),
  clust_function = NULL,
  ...
)

\method{plot}{silhobj}(silhobj, label = FALSE, print.summary = TRUE, ...)
}
\arguments{
\item{pm}{A matrix where each row represents an observation and each column represents a proximity measure
to different clusters. Typically, this matrix would be a membership matrix or dissimilarity matrix from clustering results or their variable name.}

\item{pmtype}{Character string indicating whether \code{pm} represents similarity ("sim") or dissimilarity ("dissim").}

\item{silhmethod}{Character string indicating the silhouette calculation method: "pac" or "silh".}

\item{clust_function}{Optional function name (as a string) that produces the proximity measure matrix.}

\item{...}{Additional arguments passed to \code{clust_function}, if used.}

\item{silhobj}{An object of class \code{silhobj}, created by \code{silhobj}}

\item{label}{A logical value indicating whether to label the x-axis with observation names. Defaults to FALSE.}

\item{print.summary}{A logical value indicating whether to print a summary of average silhouette widths for each cluster. Defaults to TRUE.}
}
\value{
A list with the following components:
\itemize{
\item \code{widths}: A data frame containing the cluster assignments, nearest neighbor, and silhouette widths.
\item \code{clus.avg.widths}: A named vector of average silhouette widths for each cluster.
\item \code{avg.width}: The overall average silhouette width across all observations.
}

A ggplot2 object representing the silhouette plot.
}
\description{
This function calculates the silhouette width for each observation based on the clustering results.
The silhouette width is used to measure how similar an observation is to its own cluster compared
to other clusters.
}
\examples{
library(Silhouette)
# Load the iris dataset
data(iris)
# Run k-means clustering (e.g., 3 clusters)
kmeans_result <- kmeans(iris[, 1:4], centers = 3)

# Compute distance matrix (obs x clusters)
distance_matrix <- as.matrix(dist(rbind(kmeans_result$centers, iris[, 1:4])))[-(1:3), 1:3]
out = silhobj(pm = distance_matrix,pmtype = "dissim")
plot(out)

}
\references{
{
Kaufman, L., & Rousseeuw, P. J. (1990). \emph{Finding Groups in Data: An Introduction to Cluster Analysis}. Wiley.doi:10.1002/9780470316801
}
}
