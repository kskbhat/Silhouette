[{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Silhouette Package","text":"Silhouette package provides comprehensive extensible framework computing visualizing silhouette widths assess clustering quality crisp (hard) soft (fuzzy/probabilistic) clustering settings. Silhouette width, originally introduced Rousseeuw (1987), quantifies similar observation assigned cluster relative closest alternative cluster. Scores range -1 (indicative poor clustering) 1 (excellent separation). Note: package use classical Rousseeuw (1987) calculation directly. Instead, generalizes extends silhouette methodology follows: Implements Simplified Silhouette method (Van der Laan, Pollard, Bryan 2003), options medoid pac (Probability Alternative Cluster, Raymaekers Rousseeuw (2022)) approaches. Provides soft clustering silhouettes based membership probabilities (Campello Hruschka 2006; Bhat Kapu Kiruthika 2024), including density-based diagnostics like certainty density-based silhouettes. Includes density-based silhouette (dbSilhouette) computation, leverages log-ratios posterior probabilities soft clustering evaluation (Menardi 2011). Supports calculation crisp, fuzzy, median silhouette widths, allowing flexible averaging methods suit different clustering needs. Supports multi-way clustering evaluation via extSilhouette() (Schepers, Ceulemans, Van Mechelen 2008), enabling silhouette analysis biclustering higher-order tensor clustering. Offers customizable informative visualization plotSilhouette(), including grayscale options detailed cluster legends. package also integrates clustering results popular R packages cluster (silhouette, pam, clara, fanny) factoextra (eclust, hcut). Includes utility functions creating validating Silhouette objects directly components. vignette demonstrates essential features package using well-known iris dataset. showcases standard (crisp) fuzzy silhouette calculations, advanced plotting capabilities, extended silhouette metrics multi-way clustering scenarios.","code":""},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"available-functions","dir":"Articles","previous_headings":"Introduction","what":"Available Functions","title":"Silhouette Package","text":"Silhouette(): Calculates silhouette widths crisp fuzzy clustering, using user-supplied proximity matrices. softSilhouette(): Computes silhouette widths tailored soft clustering interpreting membership probabilities proximities. dbSilhouette(): Computes density-based silhouette widths soft clustering, based log-ratios posterior probabilities. cerSilhouette(): Computes certainty silhouette widths soft clustering, using maximum posterior probabilities silhouette values. calSilhouette() Computes available silhouette indices package functions returns comparative summary data frame. Automatically calculates crisp, fuzzy, median silhouette values across different methods including proximity-based (medoid, pac), soft silhouette variations (pp_pac, pp_medoid, nlpp_pac, nlpp_medoid, pd_pac, pd_medoid), probability-based methods (cer, db). Supports direct matrix input clustering function output streamlined comparative analysis. getSilhouette(): Constructs Silhouette class object directly user-provided components (e.g., cluster assignments, neighbor clusters, silhouette widths). .Silhouette(): Tests whether object class “Silhouette”, optional strict structural validation. plot() / plotSilhouette(): Visualizes silhouette widths sorted bar plots, offering grayscale flexible legend options clarity. summary(): Produces concise summaries average silhouette widths cluster sizes objects class Silhouette. extSilhouette(): Derives extended silhouette widths multi-way clustering problems, biclustering tensor clustering.","code":""},{"path":[]},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"a--when-the-proximity-matrix-is-unknown-but-centers-of-clusters-are-known","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"a. When the Proximity Matrix is Unknown but Centers of Clusters Are Known","title":"Silhouette Package","text":"example demonstrates compute silhouette widths clustering result proximity (distance) matrix observations cluster centres unknown. workflow uses classic iris dataset k-means clustering. Steps: Clustering: Perform k-means clustering iris[, -5] 3 clusters. Note: kmeans output (km) include proximity matrix. Therefore, distances observations cluster centroids must computed separately. Compute Proximity Matrix: Create matrix distances observation cluster centroid using proxy::dist().  Customize Calculation: use Probability Alternative Cluster (PAC) method (penalised variation medoid method) return sorted output:  Accessing Silhouette Summaries: Silhouette function prints overall cluster-wise silhouette indices R console print.summary = TRUE, values directly stored returned object. extract programmatically, use summary() function:","code":"data(iris) km <- kmeans(iris[, -5], centers = 3) library(proxy) dist_matrix <- proxy::dist(iris[, -5], km$centers) sil <- Silhouette(dist_matrix) head(sil) #>   cluster neighbor sil_width #> 1       1        2 0.9586603 #> 2       1        2 0.8682865 #> 3       1        2 0.8831417 #> 4       1        2 0.8465006 #> 5       1        2 0.9455979 #> 6       1        2 0.7848442 summary(sil) #> ----------------------------------------------------- #> Average crisp dissimilarity medoid silhouette: 0.6664 #> ----------------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   62        0.5546 #> 3       3   38        0.5950 plot(sil) sil_pac <- Silhouette(dist_matrix, method = \"pac\", sort = TRUE) head(sil_pac) #>    cluster neighbor sil_width #> 8        1        2 0.9611009 #> 40       1        2 0.9329754 #> 1        1        2 0.9206029 #> 18       1        2 0.9182947 #> 50       1        2 0.9158517 #> 41       1        2 0.8993130 summary(sil_pac) #> -------------------------------------------------- #> Average crisp dissimilarity pac silhouette: 0.5376 #> -------------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 plot(sil_pac) s <- summary(sil_pac,print.summary = TRUE) #> -------------------------------------------------- #> Average crisp dissimilarity pac silhouette: 0.5376 #> -------------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 # summary table s$sil.sum #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 # cluster wise silhouette widths s$clus.avg.widths #>         1         2         3  #> 0.7602929 0.4136203 0.4468368 # Overall average silhouette width s$avg.width #> [1] 0.5375927"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"b--when-the-proximity-matrix-is-known","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"b. When the Proximity Matrix Is Known","title":"Silhouette Package","text":"section describes compute silhouette widths proximity matrix—representing distances observations cluster centers—readily available part clustering model output. example makes use fuzzy c-means clustering via ppclust package classic iris dataset. Steps: Step 1: Perform Fuzzy C-Means Clustering Apply fuzzy c-means clustering iris[, -5] create three clusters. Step 2: Compute Silhouette Widths Using Proximity Matrix output object fm contains distance matrix fm$d representing proximities observation cluster center, can directly fed Silhouette() function.  Alternative: Directly Use Clustering Function clust_fun streamline workflow, can let Silhouette() function internally handle clustering silhouette calculation supplying name distance matrix (\"d\") desired clustering function:  approach eliminates explicit step extracting proximity matrix, making analyses concise. Summary: proximity matrix provided directly clustering algorithm (fuzzy c-means), silhouette widths can calculated one step. convenience, Silhouette() function accepts proximity matrix clustering function, single command completes clustering computes silhouettes. greatly simplifies process methods built-proximity outputs, supporting rapid reproducible evaluation clustering separation quality.","code":"library(ppclust) data(iris) fm <- ppclust::fcm(x = iris[, -5], centers = 3) sil_fm <- Silhouette(fm$d) plot(sil_fm) sil_fcm <- Silhouette(prox_matrix = \"d\", clust_fun = fcm, x = iris[, -5], centers = 3) plot(sil_fcm)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"c--calculation-of-fuzzy-silhouette-index-for-soft-clustering-algorithms","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"c. Calculation of Fuzzy Silhouette Index for Soft Clustering Algorithms","title":"Silhouette Package","text":"section explains compute fuzzy silhouette index proximity matrix (distances observations cluster centers) membership probability matrix available. process demonstrated fuzzy c-means clustering ppclust package applied classic iris dataset. Steps: Step 1: Perform Fuzzy C-Means Clustering Apply fuzzy c-means clustering feature columns iris dataset, specifying three clusters: Step 2: Compute Fuzzy Silhouette Widths Using Proximity Membership Matrices clustering output fm1 contains distance matrix (fm1$d) membership probability matrix (fm1$u) average = \"fuzzy\". can directly passed Silhouette() function compute fuzzy silhouette widths:  Alternative: Use Clustering Function Inline clust_fun even streamlined workflow, Silhouette() function can internally manage clustering silhouette calculations accepting names distance probability components (\"d\" \"u\") along clustering function:  approach removes need manually extract matrices clustering result, improving code efficiency reproducibility. Summary: proximity membership probability matrices directly available clustering algorithm (fuzzy c-means), fuzzy silhouette widths can calculated efficiently single step. Silhouette() function supports integrated workflow running clustering silhouette calculations internally provided relevant function argument names. functionality facilitates concise, reproducible pipeline validating quality separation soft clustering results.","code":"data(iris) fm1 <- ppclust::fcm(x = iris[, -5], centers = 3) sil_fm1 <- Silhouette(prox_matrix = fm1$d, prob_matrix = fm1$u, average = \"fuzzy\") plot(sil_fm1) library(ppclust) sil_fcm1 <- Silhouette(prox_matrix = \"d\", prob_matrix = \"u\", average = \"fuzzy\", clust_fun = fcm, x = iris[, -5], centers = 3) plot(sil_fcm1)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"comparing-two-soft-clustering-algorithms-using-the-soft-silhouette-function","dir":"Articles","previous_headings":"Use Cases","what":"2. Comparing Two Soft Clustering Algorithms Using the Soft Silhouette Function","title":"Silhouette Package","text":"often desirable assess compare clustering quality different soft clustering algorithms dataset. soft silhouette index offers principled, internal measure purpose, naturally incorporates probabilistic nature soft clusters provides single value summarizing cluster compactness separation. Example: Evaluating Fuzzy C-Means vs. Alternative Soft Clustering Algorithm Suppose wish compare performance two fuzzy clustering algorithms—Fuzzy C-Means (FCM) variant (e.g., FCM2)—using softSilhouette() function. Steps: Step 1: Perform Clustering Algorithms Fit soft clustering algorithm dataset (e.g., iris[, 1:4]): Step 2: Compute Soft Silhouette Index Result Use membership probability matrices produced algorithm:   Step 3: Summarize Compare Average Silhouette Widths Extract overall average silhouette width clustering result: higher average silhouette width indicates clustering compact well-separated clusters. Interpretation & Guidance Interpret Index: algorithm yielding higher average soft silhouette width considered produce better clustering, balances cluster cohesion separation accounting uncertainty inherent soft assignments. Practical Application: method generic; two soft clustering results (limited FCM/FCM2) can compared effectively, provided can extract membership probability matrix. Flexible Integration: softSilhouette() function also allows different silhouette calculation methods transformations (prob_type = \"nlpp\" negative log-probabilities), supporting deeper comparisons aligned methodological framework. Additional Soft Clustering Methods package also provides two additional methods computing soft silhouette widths: cerSilhouette() (Certainty-based) dbSilhouette() (Density-based). can used way softSilhouette() compare clustering algorithms.     Summary: Comparing average soft silhouette widths different soft clustering algorithms provides objective, data-driven basis determining method produces meaningful, well-defined clusters probabilistic settings. approach harmonizes easily classic fuzzy clustering advanced algorithms, can extended soft silhouette methods like certainty-based density-based approaches.","code":"data(iris)  # FCM clustering fcm_result <- ppclust::fcm(iris[, 1:4], 3)  # FCM2 clustering fcm2_result <- ppclust::fcm2(iris[, 1:4], 3) # Soft silhouette for FCM sil_fcm <- softSilhouette(prob_matrix = fcm_result$u) plot(sil_fcm) # Soft silhouette for FCM2 sil_fcm2 <- softSilhouette(prob_matrix = fcm2_result$u) plot(sil_fcm2) sfcm <- summary(sil_fcm, print.summary = FALSE) sfcm2 <- summary(sil_fcm2, print.summary = FALSE)  cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\",     \"FCM2 average silhouette width:\", sfcm2$avg.width) #> FCM average silhouette width: 0.7541271  #>  FCM2 average silhouette width: 0.411275 # Certainty-based silhouette for FCM and FCM2   cer_fcm <- cerSilhouette(prob_matrix = fcm_result$u, print.summary = TRUE) #> ---------------------------------------------- #> Average crisp similarity db silhouette: 0.8572 #> ---------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   60        0.7826 #> 2       2   40        0.8351 #> 3       3   50        0.9645 #> Available attributes: names, class, row.names, proximity_type, method, average   plot(cer_fcm) cer_fcm2 <- cerSilhouette(prob_matrix = fcm2_result$u, print.summary = TRUE) #> ---------------------------------------------- #> Average crisp similarity db silhouette: 0.6236 #> ---------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   25        0.5974 #> 2       2   65        0.7135 #> 3       3   60        0.5371 #> Available attributes: names, class, row.names, proximity_type, method, average   plot(cer_fcm2) # Density-based silhouette for FCM and FCM2   db_fcm <- dbSilhouette(prob_matrix = fcm_result$u, print.summary = TRUE) #> --------------------------------------- #> Median similarity db silhouette: 0.3098 #> --------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   60        0.2225 #> 2       2   40        0.2456 #> 3       3   50        0.5074 #> Available attributes: names, class, row.names, proximity_type, method, average   plot(db_fcm) db_fcm2 <- dbSilhouette(prob_matrix = fcm2_result$u, print.summary = TRUE) #> --------------------------------------- #> Median similarity db silhouette: 0.2607 #> --------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   25        0.2642 #> 2       2   65        0.4942 #> 3       3   60        0.1943 #> Available attributes: names, class, row.names, proximity_type, method, average   plot(db_fcm2) # Compare average silhouette widths across all methods   # Summary for FCM   cer_sfcm <- summary(cer_fcm, print.summary = FALSE)   db_sfcm <- summary(db_fcm, print.summary = FALSE)      # Summary for FCM2   cer_sfcm2 <- summary(cer_fcm2, print.summary = FALSE)   db_sfcm2 <- summary(db_fcm2, print.summary = FALSE)      # Print comparison   cat(\"FCM - Soft silhouette:\", sfcm$avg.width, \"\\n\",       \"FCM - Certainty silhouette:\", cer_sfcm$avg.width, \"\\n\",       \"FCM - Density-based silhouette:\", db_sfcm$avg.width,        \"\\n\\n\",\"FCM2 - Soft silhouette:\", sfcm2$avg.width,        \"\\n\",\"FCM2 - Certainty silhouette:\", cer_sfcm2$avg.width,        \"\\n\",\"FCM2 - Density-based silhouette:\", db_sfcm2$avg.width, \"\\n\") #> FCM - Soft silhouette: 0.7541271  #>  FCM - Certainty silhouette: 0.8572481  #>  FCM - Density-based silhouette: 0.3097745  #>  #>  FCM2 - Soft silhouette: 0.411275  #>  FCM2 - Certainty silhouette: 0.6235972  #>  FCM2 - Density-based silhouette: 0.2607283"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"scree-plot-for-optimal-number-of-clusters","dir":"Articles","previous_headings":"Use Cases","what":"3. Scree Plot for Optimal Number of Clusters","title":"Silhouette Package","text":"scree plot (also called “elbow plot” “reverse elbow plot”) practical tool identifying best number clusters unsupervised learning. , silhouette width calculated different values k (number clusters). resulting plot provides visual indication optimal cluster count highlighting increasing k yields marginal improvements average silhouette width. Steps: Step 1: Compute Average Silhouette Widths Varying Cluster Counts Run silhouette analysis across range possible cluster numbers (e.g., 2 7). k, use Silhouette class function calculate silhouette widths, extract average silhouette width summary. Step 2: Create Interpret Scree Plot Plot number clusters computed average silhouette widths:  optimal number clusters often suggested “elbow” “reverse elbow”—point increases k lead diminishing excessive improvements silhouette width. visual guide valuable assessing clustering structure data. Note: Silhouette class functions can used generate scree plots optimal cluster selection. theoretical background additional diagnostic options soft clustering, see Bhat Kapu Kiruthika (2024). Summary: scree plot provides intuitive graphical summary assist choosing optimal number clusters plotting average silhouette width versus number clusters considered. integrated use Silhouette(), softSilhouette(), cerSilhouette(), dbSilhouette() use clust_fun summary functions makes analysis straightforward efficient crisp fuzzy clustering frameworks. method encourages reproducible, objective approach cluster selection unsupervised analysis.","code":"data(iris) avg_sil_width <- rep(NA,7) for (k in 2:7) {   sil_out <- Silhouette(     prox_matrix = \"d\",     method = \"pac\",     clust_fun = ppclust::fcm,     x = iris[, 1:4],     centers = k)   avg_sil_width[k] <- summary(sil_out, print.summary = FALSE)$avg.width } plot(avg_sil_width,   type = \"o\",   ylab = \"Overall Silhouette Width\",   xlab = \"Number of Clusters\",   main = \"Silhouette Scree Plot\" )"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"visualizing-silhouette-analysis-results-with-plotsilhouette","dir":"Articles","previous_headings":"Use Cases","what":"4. Visualizing Silhouette Analysis Results with plotSilhouette()","title":"Silhouette Package","text":"Efficient visualization silhouette widths essential interpreting diagnosing clustering quality. plotSilhouette() function provides flexible extensible tool plotting silhouette results various clustering algorithms, supporting hard (crisp) soft (fuzzy) partitions. Key Features: - Accepts outputs wide range clustering methods: Silhouette, softSilhouette, dbSilhouette, cerSilhouette well clustering objects cluster (pam, clara, fanny, base silhouette) factoextra (eclust, hcut). - Offers detailed legends summarizing average silhouette widths cluster sizes. - Supports customizable color palettes, including grayscale, option label observations x-axis. Illustrative Use Cases Code Crisp Silhouette Visualization (e.g., k-means clustering):   Crisp Silhouette Cluster Algorithms (PAM, CLARA, FANNY):    Base silhouette object:  factoextra::hcut/eclust clusterings:   drclust::silhouette Visualization:  Fuzzy (Soft) Silhouette Visualization (e.g., fuzzy c-means ppclust):  Customization: Grayscale, Detailed Legends, Observation Labels:    Practical Guidance: - clustering output classes supported generic plot() function, always use plotSilhouette() explicitly ensure correct informative visualization. - function automatically sorts silhouette widths within clusters, displays average silhouette (dashed line), provides detailed cluster summaries legend. Summary:plotSilhouette() brings unified, publication-ready visualization capabilities assessing crisp fuzzy clustering glance. broad compatibility, detailed legends, grayscale labeling options empower users gain deeper insights clustering structure, facilitating clear diagnosis reporting exploratory formal statistical workflows.","code":"data(iris)   km_out <- kmeans(iris[, -5], 3)   dist_mat <- proxy::dist(iris[, -5], km_out$centers)   sil_obj <- Silhouette(dist_mat)   plot(sil_obj)                   # S3 method auto-dispatch plotSilhouette(sil_obj)         # explicit call (identical output) library(cluster) pam_result <- pam(iris[, 1:4], k = 3) plotSilhouette(pam_result) # for cluster::pam object clara_result <- clara(iris[, 1:4], k = 3) plotSilhouette(clara_result) fanny_result <- fanny(iris[, 1:4], k = 3) plotSilhouette(fanny_result) sil_base <- cluster::silhouette(pam_result) plotSilhouette(sil_base) library(factoextra) eclust_result <- eclust(iris[, 1:4], \"kmeans\", k = 3, graph = FALSE) plotSilhouette(eclust_result) hcut_result <- hcut(iris[, 1:4], k = 3) plotSilhouette(hcut_result) library(drclust) # Loading the numeric in matrix  iris_mat <- as.matrix(iris[,-5]) #applying a clustering algorithm drclust_out <- dpcakm(iris_mat, 20, 3) #silhouette based on the data and the output of the clustering algorithm d <- silhouette(iris_mat, drclust_out) #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> ℹ The deprecated feature was likely used in the factoextra package. #>   Please report the issue at <https://github.com/kassambara/factoextra/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #>    cluster size ave.sil.width #> 1        1   17          0.16 #> 2        2   16          0.35 #> 3        3   14          0.06 #> 4        4   10          0.15 #> 5        5    9         -0.09 #> 6        6    9          0.11 #> 7        7    8          0.28 #> 8        8    8         -0.02 #> 9        9    7          0.23 #> 10      10    7          0.12 #> 11      11    7          0.08 #> 12      12    6          0.41 #> 13      13    6         -0.05 #> 14      14    6          0.09 #> 15      15    5          0.31 #> 16      16    4          0.08 #> 17      17    4          0.45 #> 18      18    3          0.28 #> 19      19    3          0.31 #> 20      20    1          0.00 plotSilhouette(d$cl.silhouette) data(iris) fcm_out <- ppclust::fcm(iris[, 1:4], 3) sil_fuzzy <- Silhouette(   prox_matrix = \"d\", prob_matrix = \"u\", clust_fun = fcm,   x = iris[, 1:4], centers = 3, sort = TRUE ) plot(sil_fuzzy, summary.legend = FALSE, grayscale = TRUE) plotSilhouette(sil_fuzzy, grayscale = TRUE) # Use grayscale palette plotSilhouette(sil_fuzzy, summary.legend = TRUE) # Include size + avg silhouette in legend plotSilhouette(sil_fuzzy, label = TRUE) # Label bars with row index"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"creating-and-validating-user-defined-silhouette-objects","dir":"Articles","previous_headings":"Use Cases","what":"5. Creating and Validating User-Defined Silhouette Objects","title":"Silhouette Package","text":"getSilhouette() function enables users manually construct Silhouette object precomputed cluster assignments, neighbor clusters, silhouette widths, optional weights. particularly useful custom externally derived clustering results. .Silhouette() function validates whether object valid Silhouette object, ensuring meets necessary structural attribute requirements visualization analysis. Example:  approach allows users integrate custom silhouette computations Silhouette package’s visualization framework, ensuring flexibility specialized workflows maintaining compatibility plotSilhouette().","code":"# Create a custom Silhouette object cluster_assignments <- c(1, 1, 2, 2, 3, 3) neighbor_clusters <- c(2, 2, 1, 1, 1, 1) silhouette_widths <- c(0.8, 0.7, 0.6, 0.9, 0.5, 0.4) weights <- c(0.9, 0.8, 0.7, 0.95, 0.6, 0.5)  sil_custom <- getSilhouette(   cluster = cluster_assignments,   neighbor = neighbor_clusters,   sil_width = silhouette_widths,   weight = weights,   proximity_type = \"similarity\",   method = \"pac\",   average = \"fuzzy\" ) # Validate the object is.Silhouette(sil_custom)               # Basic class check: TRUE #> [1] TRUE is.Silhouette(sil_custom, strict = TRUE) # Strict structural validation: TRUE #> [1] TRUE is.Silhouette(data.frame(a = 1:6))      # Non-Silhouette object: FALSE #> [1] FALSE # Visualize the custom Silhouette object plotSilhouette(sil_custom, summary.legend = TRUE)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"comprehensive-comparison-of-all-silhouette-methods-with-calsilhouette","dir":"Articles","previous_headings":"Use Cases","what":"6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","title":"Silhouette Package","text":"calSilhouette() function provides streamlined approach compute compare available silhouette methods package single call. function particularly useful : Comparing multiple silhouette computation methods simultaneously Evaluating clustering quality across different averaging approaches (crisp, fuzzy, median) Rapid assessment clustering performance using various silhouette formulations Key Features: - Automatically computes compatible silhouette methods based available input matrices - Returns comprehensive summary data frame comparing crisp, fuzzy, median silhouette values - Supports direct matrix input clustering function output - Computes 11 different silhouette methods proximity probability matrices provided Available Methods: proximity matrix provided: - medoid - Medoid-based silhouette - pac - PAC-based silhouette probability matrix provided: - pp_pac, pp_medoid - Posterior probabilities PAC/Medoid methods - nlpp_pac, nlpp_medoid - Negative log posterior probabilities PAC/Medoid methods - pd_pac, pd_medoid - Probability distribution PAC/Medoid methods - cer - Certainty-based silhouette - db - Density-based silhouette","code":""},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"a--comprehensive-method-comparison-using-clustering-function","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"a. Comprehensive Method Comparison Using Clustering Function","title":"Silhouette Package","text":"example demonstrates use calSilhouette() clustering function automatically compute available silhouette methods:","code":"library(ppclust) data(iris)  # Compute all silhouette methods using FCM clustering summary_result <- calSilhouette(   prox_matrix = \"d\",   prob_matrix = \"u\",   proximity_type = \"dissimilarity\",   clust_fun = ppclust::fcm,   x = iris[, -5],   centers = 3,   print.summary = TRUE ) #>  #> Summary of All Silhouette Methods #> ==========================================  #>       Method     Crisp     Fuzzy    Median #>       medoid 0.8288288 0.9297577 0.9179945 #>          pac 0.7541271 0.8799106 0.8484197 #>       pp_pac 0.7541271 0.8799106 0.8484197 #>    pp_medoid 0.8288288 0.9297577 0.9179945 #>     nlpp_pac 0.8185224 0.9304926 0.9261387 #>  nlpp_medoid 0.8749545 0.9604788 0.9616532 #>       pd_pac 0.7469894 0.8786105 0.8562152 #>    pd_medoid 0.8196600 0.9280044 0.9225377 #>          cer 0.8572481 0.9248327 0.9041529 #>           db 0.3303585 0.4206051 0.3097745  # View the results head(summary_result) #>        Method     Crisp     Fuzzy    Median #> 1      medoid 0.8288288 0.9297577 0.9179945 #> 2         pac 0.7541271 0.8799106 0.8484197 #> 3      pp_pac 0.7541271 0.8799106 0.8484197 #> 4   pp_medoid 0.8288288 0.9297577 0.9179945 #> 5    nlpp_pac 0.8185224 0.9304926 0.9261387 #> 6 nlpp_medoid 0.8749545 0.9604788 0.9616532"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"b--method-comparison-using-output-proximity-matrices","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"b. Method Comparison Using Output Proximity Matrices","title":"Silhouette Package","text":"clustering already performed, can directly use output matrices:","code":"# Perform clustering first fcm_result <- ppclust::fcm(iris[, -5], centers = 3)  # Compute all silhouette methods using the clustering output summary_direct <- calSilhouette(   prox_matrix = fcm_result$d,   prob_matrix = fcm_result$u,   proximity_type = \"dissimilarity\",   a = 2,   print.summary = TRUE ) #>  #> Summary of All Silhouette Methods #> ==========================================  #>       Method     Crisp     Fuzzy    Median #>       medoid 0.8288288 0.9297577 0.9179945 #>          pac 0.7541271 0.8799106 0.8484197 #>       pp_pac 0.7541271 0.8799106 0.8484197 #>    pp_medoid 0.8288288 0.9297577 0.9179945 #>     nlpp_pac 0.8185224 0.9304926 0.9261387 #>  nlpp_medoid 0.8749545 0.9604788 0.9616532 #>       pd_pac 0.7469894 0.8786105 0.8562152 #>    pd_medoid 0.8196600 0.9280044 0.9225377 #>          cer 0.8572481 0.9248327 0.9041529 #>           db 0.3303585 0.4206051 0.3097745  # Access specific results head(summary_direct) #>        Method     Crisp     Fuzzy    Median #> 1      medoid 0.8288288 0.9297577 0.9179945 #> 2         pac 0.7541271 0.8799106 0.8484197 #> 3      pp_pac 0.7541271 0.8799106 0.8484197 #> 4   pp_medoid 0.8288288 0.9297577 0.9179945 #> 5    nlpp_pac 0.8185224 0.9304926 0.9261387 #> 6 nlpp_medoid 0.8749545 0.9604788 0.9616532"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"c--comparing-clustering-algorithms-using-calsilhouette","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"c. Comparing Clustering Algorithms Using calSilhouette()","title":"Silhouette Package","text":"powerful application calSilhouette() comparing multiple clustering algorithms across silhouette methods:","code":"# Compare FCM and FCM2 algorithms fcm_summary <- calSilhouette(   prox_matrix = \"d\",   prob_matrix = \"u\",   proximity_type = \"dissimilarity\",   clust_fun = ppclust::fcm,   x = iris[, -5],   centers = 3,   print.summary = FALSE )  fcm2_summary <- calSilhouette(   prox_matrix = \"d\",   prob_matrix = \"u\",   proximity_type = \"dissimilarity\",   clust_fun = ppclust::fcm2,   x = iris[, -5],   centers = 3,   print.summary = FALSE )  # Create comparison data frame comparison <- data.frame(   Method = fcm_summary$Method,   FCM_Crisp = fcm_summary$Crisp,   FCM2_Crisp = fcm2_summary$Crisp,   FCM_Fuzzy = fcm_summary$Fuzzy,   FCM2_Fuzzy = fcm2_summary$Fuzzy,   stringsAsFactors = FALSE )  print(comparison) #>         Method FCM_Crisp FCM2_Crisp FCM_Fuzzy FCM2_Fuzzy #> 1       medoid 0.8288288  0.7181559 0.9297577  0.8566239 #> 2          pac 0.7541271  0.5988649 0.8799106  0.7700619 #> 3       pp_pac 0.7541271  0.5988649 0.8799106  0.7700619 #> 4    pp_medoid 0.8288288  0.7181559 0.9297577  0.8566239 #> 5     nlpp_pac 0.8185224  0.6700537 0.9304926  0.8326067 #> 6  nlpp_medoid 0.8749545  0.7748310 0.9604788  0.8991463 #> 7       pd_pac 0.7469894  0.4262756 0.8786105  0.5744897 #> 8    pd_medoid 0.8196600  0.5598445 0.9280044  0.6963562 #> 9          cer 0.8572481  0.7452355 0.9248327  0.8427990 #> 10          db 0.3303585  0.3473950 0.4206051  0.5002794"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"d--visualizing-method-comparisons","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"d. Visualizing Method Comparisons","title":"Silhouette Package","text":"Visualize comparison across different methods averaging approaches:","code":"library(ggplot2) library(tidyr)  # Reshape data for plotting comparison_long <- tidyr::pivot_longer(   comparison,   cols = -Method,   names_to = \"Algorithm_Type\",   values_to = \"Silhouette_Width\" )  # Create grouped bar plot ggplot(comparison_long, aes(x = Method, y = Silhouette_Width, fill = Algorithm_Type)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   theme_minimal() +   theme(     axis.text.x = element_text(angle = 45, hjust = 1, size = 10),     legend.position = \"bottom\"   ) +   labs(     title = \"Comparison of Silhouette Methods: FCM vs FCM2\",     x = \"Silhouette Method\",     y = \"Average Silhouette Width\",     fill = \"Algorithm & Type\"   ) +   scale_fill_brewer(palette = \"Set2\") +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray40\")"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"e--selecting-optimal-number-of-clusters-using-calsilhouette","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"e. Selecting Optimal Number of Clusters Using calSilhouette()","title":"Silhouette Package","text":"Use calSilhouette() evaluate clustering quality across different numbers clusters:","code":"# Compute silhouette summaries for k = 2 to 6 k_range <- 2:6 results_list <- list()  for (k in k_range) {   results_list[[as.character(k)]] <- calSilhouette(     prox_matrix = \"d\",     prob_matrix = \"u\",     proximity_type = \"dissimilarity\",     clust_fun = ppclust::fcm,     x = iris[, -5],     centers = k,     print.summary = FALSE   ) }  # Extract crisp pac method silhouette widths for comparison pac_widths <- sapply(results_list, function(x) x$Crisp[x$Method == \"pac\"])  # Plot optimal k selection plot(k_range, pac_widths,   type = \"o\", pch = 19,   xlab = \"Number of Clusters (k)\",   ylab = \"Average Silhouette Width (PAC method)\",   main = \"Optimal Cluster Selection using calSilhouette()\",   col = \"steelblue\", lwd = 2,   ylim = c(min(pac_widths) * 0.95, max(pac_widths) * 1.05) ) grid() abline(h = max(pac_widths), lty = 2, col = \"red\") text(k_range[which.max(pac_widths)], max(pac_widths),       labels = paste(\"Optimal k =\", k_range[which.max(pac_widths)]),       pos = 3, col = \"red\")"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"f--method-specific-analysis","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"f. Method-Specific Analysis","title":"Silhouette Package","text":"Extract analyze specific methods comprehensive summary:","code":"# Get all pac-based methods pac_methods <- summary_result[grep(\"pac\", summary_result$Method), ] cat(\"PAC-based methods:\\n\") #> PAC-based methods: print(pac_methods, row.names = FALSE) #>    Method     Crisp     Fuzzy    Median #>       pac 0.7541271 0.8799106 0.8484197 #>    pp_pac 0.7541271 0.8799106 0.8484197 #>  nlpp_pac 0.8185224 0.9304926 0.9261387 #>    pd_pac 0.7469894 0.8786105 0.8562152  # Get all medoid-based methods medoid_methods <- summary_result[grep(\"medoid\", summary_result$Method), ] cat(\"\\nMedoid-based methods:\\n\") #>  #> Medoid-based methods: print(medoid_methods, row.names = FALSE) #>       Method     Crisp     Fuzzy    Median #>       medoid 0.8288288 0.9297577 0.9179945 #>    pp_medoid 0.8288288 0.9297577 0.9179945 #>  nlpp_medoid 0.8749545 0.9604788 0.9616532 #>    pd_medoid 0.8196600 0.9280044 0.9225377  # Get probability-based methods (cer, db) prob_methods <- summary_result[summary_result$Method %in% c(\"cer\", \"db\"), ] cat(\"\\nProbability-based methods (cer, db):\\n\") #>  #> Probability-based methods (cer, db): print(prob_methods, row.names = FALSE) #>  Method     Crisp     Fuzzy    Median #>     cer 0.8572481 0.9248327 0.9041529 #>      db 0.3303585 0.4206051 0.3097745  # Compare crisp vs fuzzy vs median averaging cat(\"\\n=== Best Methods by Averaging Type ===\\n\") #>  #> === Best Methods by Averaging Type === cat(\"Best method by crisp averaging:\",      summary_result$Method[which.max(summary_result$Crisp)],      \"(\", round(max(summary_result$Crisp, na.rm = TRUE), 4), \")\\n\") #> Best method by crisp averaging: nlpp_medoid ( 0.875 ) cat(\"Best method by fuzzy averaging:\",      summary_result$Method[which.max(summary_result$Fuzzy)],      \"(\", round(max(summary_result$Fuzzy, na.rm = TRUE), 4), \")\\n\") #> Best method by fuzzy averaging: nlpp_medoid ( 0.9605 ) cat(\"Best method by median averaging:\",      summary_result$Method[which.max(summary_result$Median)],      \"(\", round(max(summary_result$Median, na.rm = TRUE), 4), \")\\n\") #> Best method by median averaging: nlpp_medoid ( 0.9617 )"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"g--comparing-only-proximity-based-methods","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"g. Comparing Only Proximity-Based Methods","title":"Silhouette Package","text":"proximity matrix available (e.g., crisp clustering), calSilhouette() automatically computes applicable methods:","code":"library(proxy) data(iris)  # K-means clustering (crisp clustering) km <- kmeans(iris[, -5], centers = 3)  # Compute distance matrix dist_matrix <- proxy::dist(iris[, -5], km$centers)  # Compute only proximity-based silhouettes (medoid and pac) crisp_summary <- calSilhouette(   prox_matrix = dist_matrix,   proximity_type = \"dissimilarity\",   print.summary = TRUE ) #>  #> Summary of All Silhouette Methods #> ==========================================  #>  Method     Crisp    Median #>  medoid 0.6663856 0.7254804 #>     pac 0.5375927 0.5692253  # View results (note: no Fuzzy column since prob_matrix not provided) print(crisp_summary) #>   Method     Crisp    Median #> 1 medoid 0.6663856 0.7254804 #> 2    pac 0.5375927 0.5692253"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"h--heatmap-visualization-of-method-comparisons","dir":"Articles","previous_headings":"Use Cases > 6. Comprehensive Comparison of All Silhouette Methods with calSilhouette()","what":"h. Heatmap Visualization of Method Comparisons","title":"Silhouette Package","text":"Create heatmap visualize performance across methods averaging types:  Practical Guidance: Use calSilhouette() need comprehensive overview clustering quality across multiple methodological perspectives function especially useful algorithm comparison studies sensitivity analyses Different methods may highlight different aspects cluster quality; examining multiple methods provides robust assessment crisp clustering (proximity matrix available), function automatically computes applicable methods (medoid, pac) parameter controls fuzzifier weighted averaging fuzzy methods (default = 2) Consider using heatmaps grouped bar plots visualize method comparisons effectively selecting optimal number clusters, examine multiple methods rather relying single metric Interpretation Guidelines: Crisp averaging: Unweighted average, treats observations equally Fuzzy averaging: Weighted membership probabilities, emphasizes observations stronger cluster membership Median averaging: Robust outliers, provides stable estimates presence extreme values PAC methods: penalized, conservative estimates cluster quality Medoid methods: Less penalized, may optimistic cluster separation Density-based (db): Considers log-ratios posterior probabilities, good identifying density-based cluster structure Certainty-based (cer): Uses maximum posterior probabilities, emphasizes confidence cluster assignments Summary: calSilhouette() provides powerful, unified interface comprehensive silhouette analysis, enabling researchers evaluate clustering solutions multiple perspectives simultaneously. function streamlines comparative studies, supports robust cluster validation, facilitates reproducible clustering diagnostics across different algorithms parameter settings. integration package’s visualization capabilities makes essential tool thorough clustering quality assessment crisp soft clustering contexts.","code":"library(ggplot2) library(tidyr)  # Reshape data for heatmap heatmap_data <- tidyr::pivot_longer(   summary_result,   cols = c(Crisp, Fuzzy, Median),   names_to = \"Average_Type\",   values_to = \"Silhouette_Width\" )  # Create heatmap ggplot(heatmap_data, aes(x = Average_Type, y = Method, fill = Silhouette_Width)) +   geom_tile(color = \"white\") +   geom_text(aes(label = round(Silhouette_Width, 3)), color = \"black\", size = 3) +   scale_fill_gradient2(     low = \"red\", mid = \"yellow\", high = \"green\",     midpoint = median(heatmap_data$Silhouette_Width, na.rm = TRUE),     na.value = \"gray90\"   ) +   theme_minimal() +   theme(     axis.text.x = element_text(angle = 0, hjust = 0.5),     axis.text.y = element_text(size = 10),     legend.position = \"right\"   ) +   labs(     title = \"Silhouette Width Heatmap Across Methods and Averaging Types\",     x = \"Averaging Type\",     y = \"Silhouette Method\",     fill = \"Silhouette\\nWidth\"   )"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"extended-silhouette-analysis-for-multi-way-clustering","dir":"Articles","previous_headings":"Use Cases","what":"7. Extended Silhouette Analysis for Multi-Way Clustering","title":"Silhouette Package","text":"extSilhouette() function enables silhouette-based evaluation multi-way clustering scenarios, biclustering tensor clustering, aggregating silhouette indices mode (e.g., rows, columns) single summary metric. approach allows rigorously assess overall clustering structure partitioning data along multiple dimensions. Workflow: Step 1: Apply Multi-Way Clustering Fit biclustering algorithm data—example, use blockcluster::coclusterContinuous() jointly cluster rows columns iris dataset. Step 2: Compute Silhouette Widths Mode dimension (e.g., rows columns), calculate silhouette widths using membership probability matrices (result@rowposteriorprob rows, result@colposteriorprob columns) via softSilhouette() function: (One can use Silhouette class function calculate relevant proximity measure available, consistency make sure objects list derived method arguments.) Step 3: Aggregate Silhouette Results extSilhouette() Combine silhouette analyses mode passing list extSilhouette(). Optionally, provide descriptive dimension names: Summary: extSilhouette() function returns: - overall extended silhouette width—weighted average summarizing clustering quality across modes. - dimension statistics table, reporting number observations average silhouette width mode (e.g., rows, columns). Note:  distance matrix available output biclustering algorithm, can compute individual mode silhouettes using Silhouette(). results can combined extSilhouette() enable direct comparison clustering solutions across multiple biclustering algorithms, facilitating objective model assessment (Kapu C 2025). methodology provides concise interpretable assessment complex clustering models conventional one-dimensional indices insufficient.","code":"library(blockcluster) data(iris) result <- coclusterContinuous(as.matrix(iris[, -5]), nbcocluster = c(3, 2)) #> Co-Clustering successfully terminated! sil_mode1 <- softSilhouette(   prob_matrix = result@rowposteriorprob,   method = \"pac\",   print.summary = FALSE ) sil_mode2 <- softSilhouette(   prob_matrix = result@colposteriorprob,   method = \"pac\",   print.summary = FALSE ) ext_sil <- extSilhouette(   sil_list = list(sil_mode1, sil_mode2),   dim_names = c(\"Rows\", \"Columns\"),   print.summary = TRUE ) #> --------------------------- #> Extended silhouette: 0.7057  #> --------------------------- #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1      Rows   150        0.6979 #> 2   Columns     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shrikrishna Bhat K. Author, maintainer, copyright holder. Kiruthika C. Author.","code":""},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhat K S, Kiruthika C (2025). Silhouette: Proximity Measure Based Diagnostics Standard, Soft, Multi-Way Clustering. doi:10.32614/CRAN.package.Silhouette, R package version 0.9.7, https://kskbhat.github.io/Silhouette/.","code":"@Manual{,   title = {Silhouette: Proximity Measure Based Diagnostics for Standard, Soft, and Multi-Way Clustering},   author = {Shrikrishna {Bhat K} and C Kiruthika},   year = {2025},   note = {R package version 0.9.7},   doi = {10.32614/CRAN.package.Silhouette},   url = {https://kskbhat.github.io/Silhouette/}, }"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"silhouette-","dir":"","previous_headings":"","what":"Silhouette Package","title":"Silhouette Package","text":"R package silhouette-based diagnostics standard, soft, multi-way clustering. Quantifies clustering quality measuring cohesion within clusters separation clusters. Implements advanced silhouette width computations diverse clustering structures, including: simplified silhouette Van der Laan et al. (2003), Probability Alternative Cluster normalization methods Raymaekers & Rousseeuw (2022), fuzzy clustering silhouette diagnostics using membership probabilities Campello & Hruschka (2006), Menardi (20011) Bhat & Kiruthika (2024), multi-way clustering extensions block tensor clustering Schepers et al. (2008) Bhat & Kiruthika (2025). Provides tools computation visualization based Rousseeuw (1987) support robust reproducible cluster diagnostics across standard, soft, multi-way clustering settings. Note: package use classical Rousseeuw (1987) calculation directly.","code":""},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"id_-why-this-package","dir":"","previous_headings":"","what":"✅ Why This Package?","title":"Silhouette Package","text":"Unified & consistent: Offers one coherent interface crisp, soft, multi-way clustering silhouette diagnostics. Flexible: Works distance matrices, clustering outputs, soft membership probabilities. Advanced: Implements newer normalization methods (PAC, db), handles soft clustering, supports mode-wise silhouette aggregation. Visualization: Plot functions produce clear, customizable silhouette plots compatible many clustering outputs existing silhouette outputs factoextra, cluster drclust R packages. Comparability: Summaries plots make easy compare clustering algorithms tune number clusters. Interoperable: Silhouette class functions works clustering output provides proximity membership probability matrix. Users can also supply proximity matrix clustering function—including S3 S4 methods—let Silhouette class perform clustering compute silhouettes internally one step.","code":""},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Silhouette Package","text":"can install released version Silhouette GitHub using: CRAN, install via:","code":"# Install devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install from GitHub devtools::install_github(\"kskbhat/Silhouette\") install.packages(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Silhouette Package","text":"Usage main functions demonstrated package examples documentation. intro, see vignette Silhouette, available can access vignette Get started tab top navigation bar package’s website.","code":"vignette(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"report-a-bug-or-request-a-feature","dir":"","previous_headings":"","what":"Report a Bug or Request a Feature","title":"Silhouette Package","text":"encounter bug idea new feature Silhouette package, please let us know opening issue GitHub: Create issue GitHub bugs: include minimal reproducible example, describe expected vs. actual behavior, mention R package versions feature requests: clearly describe proposed feature, purpose, benefit users feedback suggestions valuable help improve package.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Silhouette: Proximity Measure Based Diagnostics for Standard, Soft, and Multi-Way Clustering — Silhouette-package","title":"Silhouette: Proximity Measure Based Diagnostics for Standard, Soft, and Multi-Way Clustering — Silhouette-package","text":"Quantifies clustering quality measuring cohesion within clusters separation clusters. Implements advanced silhouette width computations diverse clustering structures, including: simplified silhouette (Van der Laan et al., 2003) doi:10.1080/0094965031000136012 , Probability Alternative Cluster normalization methods (Raymaekers & Rousseeuw, 2022) doi:10.1080/10618600.2022.2050249 , fuzzy clustering silhouette diagnostics using membership probabilities (Campello & Hruschka, 2006; Menardi, 2011; Bhat & Kiruthika, 2024) doi:10.1016/j.fss.2006.07.006 , doi:10.1007/s11222-010-9169-0 , doi:10.1080/23737484.2024.2408534 , multi-way clustering extensions block tensor clustering (Schepers et al., 2008; Bhat & Kiruthika, 2025) doi:10.1007/s00357-008-9005-9 , doi:10.21203/rs.3.rs-6973596/v1 . Provides tools computation visualization (Rousseeuw, 1987) doi:10.1016/0377-0427(87)90125-7  support robust reproducible cluster diagnostics across standard, soft, multi-way clustering settings.","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Silhouette: Proximity Measure Based Diagnostics for Standard, Soft, and Multi-Way Clustering — Silhouette-package","text":"Maintainer: Shrikrishna Bhat K skbhat.@gmail.com (ORCID) [copyright holder] Authors: Kiruthika C (ORCID)","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Computes silhouette width observation based clustering results, measuring similar observation cluster compared nearest neighbor cluster. silhouette width ranges -1 1, higher values indicate better cluster cohesion separation.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"","code":"Silhouette(   prox_matrix,   proximity_type = c(\"dissimilarity\", \"similarity\"),   method = c(\"medoid\", \"pac\"),   average = c(\"crisp\", \"fuzzy\", \"median\"),   prob_matrix = NULL,   a = 2,   sort = FALSE,   print.summary = FALSE,   clust_fun = NULL,   ... )  # S3 method for class 'Silhouette' plot(   x,   label = FALSE,   summary.legend = TRUE,   grayscale = FALSE,   linetype = c(\"dashed\", \"solid\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\"),   ... )  # S3 method for class 'Silhouette' summary(object, print.summary = TRUE, ...)"},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"prox_matrix numeric matrix rows represent observations columns represent proximity measures (e.g., distances similarities) clusters. Typically, membership dissimilarity matrix clustering results. clust_fun provided, prox_matrix name matrix component string (e.g., clust_fun = fcm ppclust package prox_matrix = \"d\"). proximity_type Character string specifying type proximity measure prox_matrix. Options \"similarity\" (higher values indicate closer proximity) \"dissimilarity\" (lower values indicate closer proximity). Defaults \"dissimilarity\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"medoid\". average Character string specifying method computing average silhouette width. Options : \"crisp\" – unweighted (simple) average. \"fuzzy\" – weighted average based membership probability differences. \"median\" – median silhouette width across observations. Defaults \"crisp\". prob_matrix numeric matrix cluster membership probabilities, rows represent observations columns represent clusters (depending prob_type). clust_fun provided, prob_matrix can given name matrix component (e.g., \"u\" fcm function). NULL average = \"fuzzy\", function falls back computing \"crisp\" silhouette warning, since fuzzy silhouette widths require membership probabilities. Defaults NULL. Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults TRUE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm. x object class \"Silhouette\", typically output Silhouette, softSilhouette, dbSilhouette cerSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette, silhouette cluster, factoextra, drclust packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. linetype Character numeric value specifying type line used horizontal reference line indicating average silhouette width. Accepts standard ggplot2 linetype values, : Character: \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\". Numeric: integers 0 6 corresponding ggplot2 line patterns. Defaults \"dashed\". object object class \"Silhouette\", typically output Silhouette, softSilhouette,  dbSilhouette,  cerSilhouette function.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\"). average Character — averaging method: \"crisp\", \"fuzzy\", \"median\". ,  summary returns list containing: clus.avg.widths: named numeric vector average silhouette widths per cluster. avg.width: overall average silhouette width. sil.sum: data frame columns cluster, size, avg.sil.width summarizing cluster sizes average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Silhouette function implements Simplified Silhouette method introduced Van der Laan, Pollard, & Bryan (2003), adapts generalizes classic silhouette method Rousseeuw (1987). Clustering quality evaluated using proximity matrix, denoted \\(\\Delta = [\\delta_{ik}]_{n \\times K}\\) dissimilarity measures \\(\\Delta' = [\\delta'_{ik}]_{n \\times K}\\) similarity measures. , \\(= 1, \\ldots, n\\) indexes observations, \\(k = 1, \\ldots, K\\) indexes clusters. \\(\\delta_{ik}\\) represents dissimilarity (e.g., distance) observation \\(\\) cluster \\(k\\), \\(\\delta'_{ik}\\) represents similarity values. silhouette width \\(S(x_i)\\) observation \\(\\) depends proximity type: dissimilarity measures: $$   S(x_i) = \\frac{ \\min_{k' \\neq k} \\delta_{ik'} - \\delta_{ik} }{ N(x_i) } $$ similarity measures: $$   S(x_i) = \\frac{ \\delta'_{ik} - \\max_{k' \\neq k} \\delta'_{ik'} }{ N(x_i) } $$ \\(N(x_i)\\) normalizing factor defined method. Choice method: normalizer \\(N(x_i)\\) selected according method argument. method names reference origins may used proximity matrix, exclusively certain clustering algorithms: medoid (Van der Laan et al., 2003): Dissimilarity: \\(\\max(\\delta_{ik}, \\min_{k' \\neq k} \\delta_{ik'})\\) Similarity:    \\(\\max(\\delta'_{ik}, \\max_{k' \\neq k} \\delta'_{ik'})\\) pac (Raymaekers & Rousseeuw, 2022): Dissimilarity: \\(\\delta_{ik} + \\min_{k' \\neq k} \\delta_{ik'}\\) Similarity:    \\(\\delta'_{ik} + \\max_{k' \\neq k} \\delta'_{ik'}\\) Note: \"medoid\" \"pac\" options reflect normalization formula—requirement use PAM algorithm posterior/ensemble methods—general scoring approaches. methods can applied suitable proximity matrix, including proximity, similarity, dissimilarity matrices derived classification algorithms. flexibility means silhouette indices may computed assess group separation clusters groups formed classification-derived proximities, unsupervised clustering. average = \"crisp\", crisp silhouette index calculated (\\(CS\\)) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i) $$ summarizing overall clustering quality. average = \"fuzzy\" prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) representing probability observation \\(\\) belonging cluster \\(k\\), fuzzy silhouette index (\\(FS\\)) calculated : $$   FS = \\frac{\\sum_{=1}^{n}  w_i  S(x_i) }{\\sum_{=1}^{n}  w_i} $$ \\(w_i = \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha}\\) weight \\(\\alpha\\) (argument) controls emphasis confident assignments. average = \"median\" median Silhouette Calculated","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65. doi:10.1016/0377-0427(87)90125-7 Van der Laan, M., Pollard, K., & Bryan, J. (2003). new partitioning around medoids algorithm. Journal Statistical Computation Simulation, 73(8), 575–584. doi:10.1080/0094965031000136012 Campello, R. J., & Hruschka, E. R. (2006). fuzzy extension silhouette width criterion cluster analysis. Fuzzy Sets Systems, 157(21), 2858–2875. doi:10.1016/j.fss.2006.07.006 Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332–1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"","code":"# Standard silhouette with k-means on iris dataset data(iris) # Crisp Silhouette with k-means out <- kmeans(iris[, -5], 3) if (requireNamespace(\"proxy\", quietly = TRUE)) {   library(proxy)   dist <- proxy::dist(iris[, -5], out$centers)   silh_out <- Silhouette(dist,print.summary = TRUE)   plot(silh_out) } else {   message(\"Install 'proxy': install.packages('ppclust')\") } #>  #> Attaching package: ‘proxy’ #> The following objects are masked from ‘package:stats’: #>  #>     as.dist, dist #> The following object is masked from ‘package:base’: #>  #>     as.matrix #> ----------------------------------------------------- #> Average crisp dissimilarity medoid silhouette: 0.6664 #> ----------------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   62        0.5546 #> 3       3   38        0.5950 #>  #> Available attributes: names, class, row.names, proximity_type, method, average  # \\donttest{ # Scree plot for optimal clusters (2 to 7) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   avg_sil_width <- rep(NA,7)   for (k in 2:7) {     out <- Silhouette(       prox_matrix = \"d\",       proximity_type = \"dissimilarity\",       prob_matrix = \"u\",       clust_fun = ppclust::fcm,       x = iris[, 1:4],       centers = k,       average = \"fuzzy\"     )     # Compute average silhouette width from widths     avg_sil_width[k] <- summary(out, print.summary = FALSE)$avg.width   }   plot(avg_sil_width,     type = \"o\",     ylab = \"Overall Silhouette Width\",     xlab = \"Number of Clusters\",     main = \"Scree Plot\"   ) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") }  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"Computes possible silhouette indices available functions package returns summary data frame comparing crisp, fuzzy, median silhouette values across different methods.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"","code":"calSilhouette(   prox_matrix = NULL,   proximity_type = c(\"dissimilarity\", \"similarity\"),   prob_matrix = NULL,   a = 2,   print.summary = FALSE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"prox_matrix numeric matrix rows represent observations columns represent proximity measures (e.g., distances similarities) clusters. Typically, membership dissimilarity matrix clustering results. clust_fun provided, prox_matrix name matrix component string (e.g., clust_fun = fcm ppclust package prox_matrix = \"d\"). proximity_type Character string specifying type proximity measure prox_matrix. Options \"similarity\" (higher values indicate closer proximity) \"dissimilarity\" (lower values indicate closer proximity). Defaults \"dissimilarity\". prob_matrix numeric matrix cluster membership probabilities, rows represent observations columns represent clusters (depending prob_type). clust_fun provided, prob_matrix can given name matrix component (e.g., \"u\" fcm function). Defaults NULL. Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults FALSE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"data frame following columns: Method Character vector method names Crisp_Silhouette Numeric vector crisp (unweighted) average silhouette values Fuzzy_Silhouette Numeric vector fuzzy (weighted) average silhouette values (NA prob_matrix available method) Median_Silhouette Numeric vector median silhouette values","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"function computes available silhouette methods package returns comparative summary. methods included depend available input matrices: prox_matrix available: medoid - Medoid-based silhouette using Silhouette pac - PAC-based silhouette using Silhouette prob_matrix available: pp_pac - Posterior probabilities silhouette PAC method using softSilhouette pp_medoid - Posterior probabilities silhouette Medoid method using softSilhouette nlpp_pac - Negative log posterior probabilities silhouette PAC method using softSilhouette nlpp_medoid - Negative log posterior probabilities silhouette Medoid method using softSilhouette pd_pac - Probability distribution silhouette PAC method using softSilhouette pd_medoid - Probability distribution silhouette Medoid method using softSilhouette cer - Certainty-based silhouette using cerSilhouette db - Density-based silhouette using dbSilhouette least one prox_matrix prob_matrix must provided.","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/calSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Calculate of All Possible Silhouette Methods — calSilhouette","text":"","code":"if (requireNamespace(\"ppclust\", quietly = TRUE)) {   # Example with FCM clustering   library(ppclust)   data(iris)   fcm_result <- fcm(iris[, -5], centers = 3)    # Using matrices directly   summary_result <- calSilhouette(     prox_matrix = fcm_result$d,     prob_matrix = fcm_result$u,     proximity_type = \"dissimilarity\",     print.summary = TRUE   ) } #>  #> Summary of All Silhouette Methods #> ==========================================  #>       Method     Crisp     Fuzzy    Median #>       medoid 0.8288288 0.9297577 0.9179945 #>          pac 0.7541271 0.8799106 0.8484197 #>       pp_pac 0.7541271 0.8799106 0.8484197 #>    pp_medoid 0.8288288 0.9297577 0.9179945 #>     nlpp_pac 0.8185224 0.9304926 0.9261387 #>  nlpp_medoid 0.8749545 0.9604788 0.9616532 #>       pd_pac 0.7469894 0.8786105 0.8562152 #>    pd_medoid 0.8196600 0.9280044 0.9225377 #>          cer 0.8572481 0.9248327 0.9041529 #>           db 0.3303585 0.4206051 0.3097745  if (requireNamespace(\"ppclust\", quietly = TRUE)) {   # Using clustering function   summary_result2 <- calSilhouette(     prox_matrix = \"d\",     prob_matrix = \"u\",     proximity_type = \"dissimilarity\",     clust_fun = ppclust::fcm,     x = iris[, -5],     centers = 3,     print.summary = TRUE   ) } #>  #> Summary of All Silhouette Methods #> ==========================================  #>       Method     Crisp     Fuzzy    Median #>       medoid 0.8288288 0.9297577 0.9179945 #>          pac 0.7541271 0.8799106 0.8484197 #>       pp_pac 0.7541271 0.8799106 0.8484197 #>    pp_medoid 0.8288288 0.9297577 0.9179945 #>     nlpp_pac 0.8185224 0.9304926 0.9261387 #>  nlpp_medoid 0.8749545 0.9604788 0.9616532 #>       pd_pac 0.7469894 0.8786105 0.8562152 #>    pd_medoid 0.8196600 0.9280044 0.9225377 #>          cer 0.8572481 0.9248327 0.9041529 #>           db 0.3303585 0.4206051 0.3097745"},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"Computes silhouette widths using maximum posterior probabilities Silhouette.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"","code":"cerSilhouette(   prob_matrix,   average = c(\"crisp\", \"fuzzy\", \"median\"),   a = 2,   sort = FALSE,   print.summary = FALSE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"prob_matrix numeric matrix posterior probabilities rows represent observations columns represent clusters. Must sum 1 row. clust_fun provided, prob_matrix must string giving name matrix component (e.g., \"u\"). average Character string specifying method computing average silhouette width. Options : \"crisp\" – unweighted (simple) average. \"fuzzy\" – weighted average based membership probability differences. \"median\" – median silhouette width across observations. Defaults \"crisp\". Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults FALSE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity matrix. example, fcm \"fcm\". provided, prob_matrix must string giving name matrix component (e.g., \"u\"). Defaults NULL. ... Additional arguments passed clust_fun, x, centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used .e., \"similarity\". method silhouette calculation method used .e., \"certainty\". average Character — averaging method: \"crisp\", \"fuzzy\", \"median\".","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"Let posterior probability matrix cluster membership matrix $$\\Gamma = [\\gamma_{ik}]_{n \\times K},$$ certainty silhouette width observation \\(\\) : $$ \\mathrm{Cer}_i = \\max_{k=1,\\dots,K} \\gamma_{ik} $$ #' average = \"crisp\", crisp silhouette index calculated (\\(CS\\)) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i) $$ summarizing overall clustering quality. average = \"fuzzy\" prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) representing probability observation \\(\\) belonging cluster \\(k\\), fuzzy silhouette index (\\(FS\\)) calculated : $$   FS = \\frac{\\sum_{=1}^{n}  w_i  S(x_i) }{\\sum_{=1}^{n}  w_i} $$ \\(w_i = \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha}\\) weight \\(\\alpha\\) (argument) controls emphasis confident assignments. average = \"median\" median Silhouette Calculated","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/cerSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Certainty Silhouette Width (Cer) for Soft Clustering — cerSilhouette","text":"","code":"# \\donttest{ # Compare two soft clustering algorithms using cerSilhouette # Example: FCM vs. FCM2 on iris data, using average silhouette width as a criterion data(iris) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm_result <- ppclust::fcm(iris[, 1:4], 3)   out_fcm <- cerSilhouette(prob_matrix = fcm_result$u, print.summary = TRUE)   plot(out_fcm)   sfcm <- summary(out_fcm, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ---------------------------------------------- #> Average crisp similarity db silhouette: 0.8572 #> ---------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   60        0.7826 #> 2       2   50        0.9645 #> 3       3   40        0.8351 #>  #> Available attributes: names, class, row.names, proximity_type, method, average if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm2_result <- ppclust::fcm2(iris[, 1:4], 3)   out_fcm2 <- cerSilhouette(prob_matrix = fcm2_result$u, print.summary = TRUE)   plot(out_fcm2)   sfcm2 <- summary(out_fcm2, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ---------------------------------------------- #> Average crisp similarity db silhouette: 0.6236 #> ---------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   60        0.5371 #> 2       2   65        0.7135 #> 3       3   25        0.5974 #>  #> Available attributes: names, class, row.names, proximity_type, method, average # Compare average silhouette widths of fcm and fcm2 if (requireNamespace(\"ppclust\", quietly = TRUE)) {   cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\",   \"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") } #> FCM average silhouette width: 0.8572481  #>  FCM2 average silhouette width: 0.6235972  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"Computes silhouette widths based Menardi (2011) density-based method using log-ratios posterior probabilities.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"","code":"dbSilhouette(   prob_matrix,   average = c(\"median\", \"crisp\", \"fuzzy\"),   a = 2,   sort = FALSE,   print.summary = FALSE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"prob_matrix numeric matrix posterior probabilities rows represent observations columns represent clusters. Must sum 1 row. clust_fun provided, prob_matrix must string giving name matrix component (e.g., \"u\"). average Character string specifying method computing average silhouette width. Options : \"crisp\" – unweighted (simple) average. \"fuzzy\" – weighted average based membership probability differences. \"median\" – median silhouette width across observations. Defaults \"median\". Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults FALSE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity matrix. example, fcm \"fcm\". provided, prob_matrix must string giving name matrix component (e.g., \"u\"). Defaults NULL. ... Additional arguments passed clust_fun, x, centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used .e., \"similarity\". method silhouette calculation method used .e., \"db\". average Character — averaging method: \"crisp\", \"fuzzy\", \"median\".","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"Let posterior probability matrix cluster membership matrix $$\\Gamma = [\\gamma_{ik}]_{n \\times K},$$ density-based silhouette width observation \\(\\) : $$ \\mathrm{DBS}_i = \\frac{\\log\\left( \\frac{\\gamma_{ik}}{\\max_{k' \\neq k} \\gamma_{ik'}} \\right)} {\\max_{j=1,\\dots,n} \\left| \\log\\left( \\frac{\\gamma_{jk}}{\\max_{k' \\neq k} \\gamma_{jk'}} \\right) \\right|} $$ #' average = \"crisp\", crisp silhouette index calculated (\\(CS\\)) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i) $$ summarizing overall clustering quality. average = \"fuzzy\" prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) representing probability observation \\(\\) belonging cluster \\(k\\), fuzzy silhouette index (\\(FS\\)) calculated : $$   FS = \\frac{\\sum_{=1}^{n}  w_i  S(x_i) }{\\sum_{=1}^{n}  w_i} $$ \\(w_i = \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha}\\) weight \\(\\alpha\\) (argument) controls emphasis confident assignments. average = \"median\" median Silhouette Calculated","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"Menardi, G. (2011). Density-based silhouette diagnostics clustering methods. Statistics Computing, 21(3), 295–308. doi:10.1007/s11222-010-9169-0","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/dbSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density-Based Silhouette Width (DBS) for Soft Clustering — dbSilhouette","text":"","code":"# \\donttest{ # Compare two soft clustering algorithms using dbSilhouette # Example: FCM vs. FCM2 on iris data, using average silhouette width as a criterion data(iris) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm_result <- ppclust::fcm(iris[, 1:4], 3)   out_fcm <- dbSilhouette(prob_matrix = fcm_result$u, print.summary = TRUE)   plot(out_fcm)   sfcm <- summary(out_fcm, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> --------------------------------------- #> Median similarity db silhouette: 0.3098 #> --------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   40        0.2456 #> 2       2   50        0.5074 #> 3       3   60        0.2225 #>  #> Available attributes: names, class, row.names, proximity_type, method, average if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm2_result <- ppclust::fcm2(iris[, 1:4], 3)   out_fcm2 <- dbSilhouette(prob_matrix = fcm2_result$u, print.summary = TRUE)   plot(out_fcm2)   sfcm2 <- summary(out_fcm2, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> --------------------------------------- #> Median similarity db silhouette: 0.2607 #> --------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   65        0.4942 #> 2       2   25        0.2642 #> 3       3   60        0.1943 #>  #> Available attributes: names, class, row.names, proximity_type, method, average # Compare average silhouette widths of fcm and fcm2 if (requireNamespace(\"ppclust\", quietly = TRUE)) {   cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\",   \"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") } #> FCM average silhouette width: 0.3097745  #>  FCM2 average silhouette width: 0.2607283  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"Computes extended silhouette width multi-way clustering (e.g., biclustering, triclustering, n-mode tensor clustering) combining silhouette widths list Silhouette objects, representing one mode clustering. extended silhouette width weighted average average silhouette widths mode, weighted number observations mode's silhouette analysis. output object class extSilhouette.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"","code":"extSilhouette(sil_list, dim_names = NULL, print.summary = FALSE)"},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"sil_list list objects class \"Silhouette\", typically output Silhouette softSilhouette, object represents silhouette analysis one mode multi-way clustering (e.g., rows, columns, dimensions biclustering tensor clustering). dim_names optional character vector dimension names (e.g., c(\"Rows\", \"Columns\")). NULL, defaults \"Mode 1\", \"Mode 2\", etc. print.summary Logical; TRUE, prints summary extended silhouette width dimension table. Default FALSE.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"list class \"extSilhouette\" following components: ext_sil_width numeric scalar representing extended silhouette width. dim_table data frame columns dimension (e.g., \"Mode 1\", \"Mode 2\"), n_obs (number observations), avg_sil_width (average silhouette width mode).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"extended silhouette width computed : $$ ExS = \\frac{ \\sum (n_i \\cdot w_i) }{ \\sum n_i } $$ \\(n_i\\) number observations mode \\(\\) (derived nrow(x$widths)), \\(w_i\\) average silhouette width mode (x$avg.width). Silhouette object sil_list must contain non-empty widths data frame numeric avg.width value. Modes zero observations (\\(n_i = 0\\)) allowed, result undefined weighted average. consistency make sure Silhouette objects derived method arguments.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"Schepers, J., Ceulemans, E., & Van Mechelen, . (2008). Selecting among multi-mode partitioning models different complexities: comparison four model selection criteria. Journal Classification, 25(1), 67–85. doi:10.1007/s00357-008-9005-9 Bhat Kapu, S., & Kiruthika, C. (2025). Block Probabilistic Distance Clustering: Unified Framework Evaluation. PREPRINT (Version 1) available Research Square. doi:10.21203/rs.3.rs-6973596/v1","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"","code":"# Example using iris dataset with two modes data(iris) # \\donttest{ if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   library(blockcluster)   result <- coclusterContinuous(     as.matrix(iris[, -5]),     nbcocluster = c(3, 2)   ) } else {   message(\"Install 'blockcluster': install.packages('blockcluster')\") } #> Loading required package: rtkore #> Loading required package: Rcpp #>  #> Attaching package: ‘rtkore’ #> The following object is masked from ‘package:Rcpp’: #>  #>     LdFlags #> blockcluster version 4.5.5 loaded #>  #> ---------------- #> Copyright (C)  <MODAL team @INRIA,Lille & U.M.R. C.N.R.S. 6599 Heudiasyc, UTC> #> Please post questions and bugs at: <https://gforge.inria.fr/forum/forum.php?forum_id=11190&group_id=3679> #> Co-Clustering successfully terminated!   if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   sil_mode1 <- softSilhouette(     prob_matrix = result@rowposteriorprob,     method = \"pac\")   sil_mode2 <- softSilhouette(     prob_matrix = result@colposteriorprob,     method = \"pac\"     )    # Extended silhouette   ext_sil <- extSilhouette(list(sil_mode1, sil_mode2),print.summary = TRUE) } #> --------------------------- #> Extended silhouette: 0.9325  #> --------------------------- #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1    Mode 1   150        0.9307 #> 2    Mode 2     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\"     # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/getSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Silhouette Object from User Components — getSilhouette","title":"Create Silhouette Object from User Components — getSilhouette","text":"Constructs Silhouette class object directly user-provided components without performing silhouette calculations. function allows users build Silhouette object already necessary components.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/getSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Silhouette Object from User Components — getSilhouette","text":"","code":"getSilhouette(   cluster,   neighbor,   sil_width,   weight = NULL,   proximity_type = c(\"dissimilarity\", \"similarity\"),   method = NA,   average = c(\"crisp\", \"fuzzy\", \"median\") )"},{"path":"https://kskbhat.github.io/Silhouette/reference/getSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Silhouette Object from User Components — getSilhouette","text":"cluster Numeric integer vector cluster assignments observation neighbor Numeric integer vector nearest neighbor cluster assignments observation sil_width Numeric vector silhouette widths observation (must -1 +1) weight Numeric vector weights observation (must 0 1, used average = \"fuzzy\") proximity_type Character; proximity type used. Options: \"similarity\" \"dissimilarity\" method Character; silhouette calculation method used (default: NULL, can custom name) average Character; averaging method. Options: \"crisp\", \"fuzzy\", \"median\"","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/getSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Silhouette Object from User Components — getSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\"). average Character — averaging method: \"crisp\", \"fuzzy\", \"median\".","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/getSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Silhouette Object from User Components — getSilhouette","text":"","code":"# Create a simple crisp Silhouette object (3 columns) cluster_assignments <- c(1, 1, 2, 2, 3, 3) neighbor_clusters <- c(2, 2, 1, 1, 1, 1) silhouette_widths <- c(0.8, 0.7, 0.6, 0.9, 0.5, 0.4)  sil_obj <- getSilhouette(   cluster = cluster_assignments,   neighbor = neighbor_clusters,   sil_width = silhouette_widths,   proximity_type = \"dissimilarity\",   method = \"medoid\",   average = \"crisp\" ) sil_obj #>   cluster neighbor sil_width #> 1       1        2       0.8 #> 2       1        2       0.7 #> 3       2        1       0.6 #> 4       2        1       0.9 #> 5       3        1       0.5 #> 6       3        1       0.4  # Create a fuzzy Silhouette object with weights (4 columns) weights <- c(0.9, 0.8, 0.7, 0.95, 0.6, 0.5)  sil_fuzzy <- getSilhouette(   cluster = cluster_assignments,   neighbor = neighbor_clusters,   sil_width = silhouette_widths,   weight = weights,   proximity_type = \"similarity\",   method = \"pac\",   average = \"fuzzy\" ) sil_fuzzy #>   cluster neighbor sil_width weight #> 1       1        2       0.8   0.90 #> 2       1        2       0.7   0.80 #> 3       2        1       0.6   0.70 #> 4       2        1       0.9   0.95 #> 5       3        1       0.5   0.60 #> 6       3        1       0.4   0.50  # Custom method name sil_custom <- getSilhouette(   cluster = cluster_assignments,   neighbor = neighbor_clusters,   sil_width = silhouette_widths,   proximity_type = \"dissimilarity\",   method = \"my_custom_method\",   average = \"crisp\" ) sil_custom #>   cluster neighbor sil_width #> 1       1        2       0.8 #> 2       1        2       0.7 #> 3       2        1       0.6 #> 4       2        1       0.9 #> 5       3        1       0.5 #> 6       3        1       0.4"},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Object is of Class Silhouette — is.Silhouette","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"Tests whether object class \"Silhouette\". function checks class inheritance expected structure Silhouette object.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"","code":"is.Silhouette(x, strict = FALSE)"},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"x object test strict Logical; TRUE, performs additional structural validation beyond just class checking (default: FALSE)","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"Logical; TRUE object class \"Silhouette\", FALSE otherwise","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"strict = FALSE, function checks object inherits \"Silhouette\" class. strict = TRUE, function additionally validates: Object data frame required columns: cluster, neighbor, sil_width required attributes: proximity_type, method, average Column types appropriate (integer cluster/neighbor, numeric sil_width) Silhouette object attributes validated follows: proximity_type: Must one \"dissimilarity\" \"similarity\" average: Must one \"crisp\", \"fuzzy\", \"median\" method: Can NULL string","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/is.Silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Object is of Class Silhouette — is.Silhouette","text":"","code":"# Create a Silhouette object cluster_assignments <- c(1, 1, 2, 2, 3, 3) neighbor_clusters <- c(2, 2, 1, 1, 1, 1) silhouette_widths <- c(0.8, 0.7, 0.6, 0.9, 0.5, 0.4)  sil_obj <- getSilhouette(   cluster = cluster_assignments,   neighbor = neighbor_clusters,   sil_width = silhouette_widths,   proximity_type = \"dissimilarity\",   method = \"medoid\",   average = \"crisp\" )  # Test if object is Silhouette is.Silhouette(sil_obj)          # TRUE #> [1] TRUE is.Silhouette(sil_obj, strict = TRUE)  # TRUE #> [1] TRUE  # Test with non-Silhouette objects is.Silhouette(data.frame(a = 1, b = 2))  # FALSE #> [1] FALSE is.Silhouette(matrix(1:10, ncol = 2))    # FALSE #> [1] FALSE is.Silhouette(list(a = 1, b = 2))        # FALSE #> [1] FALSE is.Silhouette(NULL)                       # FALSE #> [1] FALSE"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Silhouette Analysis Results — plotSilhouette","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Creates silhouette plot visualizing silhouette widths clustering results, bars colored cluster optional summary cluster statistics legend.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"","code":"plotSilhouette(   x,   label = FALSE,   summary.legend = TRUE,   grayscale = FALSE,   linetype = c(\"dashed\", \"solid\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\"),   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"x object class \"Silhouette\", typically output Silhouette, softSilhouette, dbSilhouette cerSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette, silhouette cluster, factoextra, drclust packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. linetype Character numeric value specifying type line used horizontal reference line indicating average silhouette width. Accepts standard ggplot2 linetype values, : Character: \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\". Numeric: integers 0 6 corresponding ggplot2 line patterns. Defaults \"dashed\". ... Additional arguments passed ggpar customizing plot (e.g., palette, legend, xlab, ylab, subtitle, title).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"ggplot2 object representing Silhouette plot.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Silhouette plot displays silhouette width (sil_width) observation, grouped cluster, bars sorted cluster descending silhouette width. summary.legend option adds cluster sizes average silhouette widths legend. function replica S3 method objects class \"Silhouette\", typically produced Silhouette, softSilhouette, , dbSilhouette , cerSilhouette functions package. also supports objects following classes, silhouette information extracted respective component: \"eclust\": Produced eclust factoextra package. \"hcut\": Produced hcut factoextra package. \"pam\": Produced pam cluster package. \"clara\": Produced clara cluster package. \"fanny\": Produced fanny cluster package. \"silhouette\": Produced silhouette cluster package silhouette drclust package. classes (\"eclust\", \"hcut\", \"pam\", \"clara\", \"fanny\", \"silhouette\"), users explicitly call plotSilhouette() (e.g., plotSilhouette(pam_result)) ensure correct method used, generic plot() may dispatch function objects.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65. doi:10.1016/0377-0427(87)90125-7","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"","code":"# \\donttest{ data(iris)  # Crisp Silhouette with k-means out <- kmeans(iris[, -5], 3) if (requireNamespace(\"proxy\", quietly = TRUE)) {   library(proxy)   dist <- dist(iris[, -5], out$centers)   plot(Silhouette(dist)) }   #' # Fuzzy Silhouette with ppclust::fcm if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   out_fuzzy <- Silhouette(     prox_matrix = \"d\",     proximity_type = \"dissimilarity\",     prob_matrix = \"u\",     clust_fun = ppclust::fcm,     x = iris[, 1:4],     centers = 3,     sort = TRUE   )   plot(out_fuzzy, summary.legend = FALSE, grayscale = TRUE) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") }   # Silhouette plot for pam clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   library(cluster)   pam_result <- pam(iris[, 1:4], k = 3)   plotSilhouette(pam_result) }   # Silhouette plot for clara clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   clara_result <- clara(iris[, 1:4], k = 3)   plotSilhouette(clara_result) }   # Silhouette plot for fanny clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   fanny_result <- fanny(iris[, 1:4], k = 3)   plotSilhouette(fanny_result) }   # Example using base silhouette() object if (requireNamespace(\"cluster\", quietly = TRUE)) {   sil <- silhouette(pam_result)   plotSilhouette(sil) }   # Silhouette plot for eclust clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   library(factoextra)   eclust_result <- eclust(iris[, 1:4], \"kmeans\", k = 3, graph = FALSE)   plotSilhouette(eclust_result) } #> Loading required package: ggplot2 #> Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa   # Silhouette plot for hcut clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   hcut_result <- hcut(iris[, 1:4], k = 3)   plotSilhouette(hcut_result) }   # Silhouette plot for hcut clustering if (requireNamespace(\"drclust\", quietly = TRUE)) {   library(drclust)   iris_mat <- as.matrix(iris[,-5])   drclust_out <- dpcakm(iris_mat, 20, 3)   d <- silhouette(iris_mat, drclust_out)   plotSilhouette(d$cl.silhouette) } #>  #> Attaching package: ‘drclust’ #> The following object is masked from ‘package:cluster’: #>  #>     silhouette #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> ℹ The deprecated feature was likely used in the factoextra package. #>   Please report the issue at <https://github.com/kassambara/factoextra/issues>. #>    cluster size ave.sil.width #> 1        1   17          0.16 #> 2        2   16          0.35 #> 3        3   14          0.06 #> 4        4   10          0.15 #> 5        5    9         -0.09 #> 6        6    9          0.11 #> 7        7    8          0.28 #> 8        8    8         -0.02 #> 9        9    7          0.23 #> 10      10    7          0.12 #> 11      11    7          0.08 #> 12      12    6          0.41 #> 13      13    6         -0.05 #> 14      14    6          0.09 #> 15      15    5          0.31 #> 16      16    4          0.08 #> 17      17    4          0.45 #> 18      18    3          0.28 #> 19      19    3          0.31 #> 20      20    1          0.00  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Computes silhouette widths soft clustering results interpreting cluster membership probabilities (transformations) proximity measures. Although originally designed evaluating clustering quality within method, adaptation allows heuristic comparison across soft clustering algorithms using average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"","code":"softSilhouette(   prob_matrix,   prob_type = c(\"pp\", \"nlpp\", \"pd\"),   method = c(\"pac\", \"medoid\"),   average = c(\"crisp\", \"fuzzy\", \"median\"),   a = 2,   sort = FALSE,   print.summary = FALSE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"prob_matrix numeric matrix rows represent observations columns represent cluster membership probabilities (transformed probabilities, depending prob_type). clust_fun provided, prob_matrix name matrix component string (e.g., \"u\" fcm). prob_type Character string specifying type transformation membership matrix considered proximity matrix prob_matrix. Options : \"pp\" Posterior probabilities \\([\\gamma_{ik}]_{n \\times K}\\) (non-negative, typically summing 1 per row), treated similarities \"nlpp\" Negative log posterior probabilities \\([-\\ln\\gamma_{ik}]_{n \\times K}\\) (non-positive), treated dissimilarities. \"pd\" Probability distribution \\([\\gamma_{ik}/\\pi_{k}]_{n \\times K}\\) (normalized posterior probabilities relative cluster proportions \\(\\pi_{k}\\)), treated similarities. Defaults \"pp\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"pac\". average Character string specifying method computing average silhouette width. Options : \"crisp\" – unweighted (simple) average. \"fuzzy\" – weighted average based membership probability differences. \"median\" – median silhouette width across observations. Defaults \"crisp\". Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults FALSE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\"). average Character — averaging method: \"crisp\", \"fuzzy\", \"median\".","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Although silhouette method originally developed evaluating clustering structure within single result, implementation allows leveraging cluster membership probabilities soft clustering methods construct proximity-based silhouettes. silhouette widths can compared heuristically across different algorithms assess clustering quality. See doi:10.1080/23737484.2024.2408534  details. #' average = \"crisp\", crisp silhouette index calculated (\\(CS\\)) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i) $$ summarizing overall clustering quality. average = \"fuzzy\" prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) representing probability observation \\(\\) belonging cluster \\(k\\), fuzzy silhouette index (\\(FS\\)) calculated : $$   FS = \\frac{\\sum_{=1}^{n}  w_i  S(x_i) }{\\sum_{=1}^{n}  w_i} $$ \\(w_i = \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha}\\) weight \\(\\alpha\\) (argument) controls emphasis confident assignments. average = \"median\" median Silhouette Calculated","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332–1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"","code":"# \\donttest{ # Compare two soft clustering algorithms using softSilhouett # Example: FCM vs. FCM2 on iris data, using average silhouette width as a criterion data(iris) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm_result <- ppclust::fcm(iris[, 1:4], 3)   out_fcm <- softSilhouette(prob_matrix = fcm_result$u,print.summary = TRUE)   plot(out_fcm)   sfcm <- summary(out_fcm, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------------- #> Average crisp similarity pac silhouette: 0.7541 #> ----------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.9507 #> 2       2   40        0.7005 #> 3       3   60        0.6261 #>  #> Available attributes: names, class, row.names, proximity_type, method, average if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm2_result <- ppclust::fcm2(iris[, 1:4], 3)   out_fcm2 <- softSilhouette(prob_matrix = fcm2_result$u,print.summary = TRUE)   plot(out_fcm2)   sfcm2 <- summary(out_fcm2, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------------- #> Average crisp similarity pac silhouette: 0.4113 #> ----------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   60        0.2666 #> 2       2   65        0.5636 #> 3       3   25        0.3623 #>  #> Available attributes: names, class, row.names, proximity_type, method, average # Compare average silhouette widths of fcm and fcm2 if (requireNamespace(\"ppclust\", quietly = TRUE)) {   cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\",   \"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") } #> FCM average silhouette width: 0.7541271  #>  FCM2 average silhouette width: 0.411275  # }"},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-096-october-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.6 (October 2025)","title":"Silhouette 0.9.6 (October 2025)","text":"CRAN release: 2025-10-15 New Features Introduced new functions: getSilhouette() Constructs Silhouette class object directly user-provided components without performing silhouette calculations. Allows users build Silhouette objects already cluster assignments, neighbor clusters, silhouette widths, optional weights. .Silhouette() Tests whether object class “Silhouette” optional strict validation. Checks class inheritance expected structure including required columns, attributes, value ranges. cerSilhouette() Computes certainty silhouette widths soft clustering using maximum posterior probabilities. Provides alternative evaluation method fuzzy clustering algorithms support crisp, fuzzy, median averaging. dbSilhouette() Computes density-based silhouette widths using log-ratios posterior probabilities based Menardi (2011) method. Offers normalized silhouette evaluation soft clustering enhanced discrimination cluster assignments. calSilhouette() Computes available silhouette indices package functions returns comparative summary data frame. Automatically calculates crisp, fuzzy, median silhouette values across different methods including proximity-based (medoid, pac), soft silhouette variations (pp_pac, pp_medoid, nlpp_pac, nlpp_medoid, pd_pac, pd_medoid), probability-based methods (cer, db). Supports direct matrix input clustering function output streamlined comparative analysis. Improvements Extended existing functions support median-based silhouette calculations alternative mean-based computations. Added new average attribute existing Silhouette class supporting “crisp”, “fuzzy”, “median” options. Enhanced clustering evaluation capabilities density-based certainty-based statistical measures. Updated documentation reflect new median calculation options soft clustering methods. Enhanced calSilhouette() compute combinations softSilhouette() methods (pp, nlpp, pd) pac medoid approaches, providing comprehensive comparative analysis across 11 different silhouette computation methods.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"updated-dependencies-0-9-6","dir":"Changelog","previous_headings":"","what":"Updated Dependencies","title":"Silhouette 0.9.6 (October 2025)","text":"Imports: dplyr, ggplot2, ggpubr, lifecycle, methods, stats Suggests: proxy, ppclust, blockcluster, cluster, factoextra, drclust","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-095-august-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.5 (August 2025)","title":"Silhouette 0.9.5 (August 2025)","text":"Updated README.md DESCRIPTION fields. Fixed example vignettes clarity. Added lifecycle badges exported functions.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-094-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.4 (July 2025)","title":"Silhouette 0.9.4 (July 2025)","text":"CRAN release: 2025-07-30 CRAN Suggested Corrections Clarified description PAC (Probability Alternative Cluster) method documentation citing original authors (Author, Year). Removed usage installed.packages() package code replaced robust CRAN-compliant approach, following suggested practices. user-facing functions now include argument print.summary, controls whether summary details printed. argument behaves similarly (verbose) cat(...) now defaults FALSE. Messages using message() included example sections suggest installation optional packages (e.g., ppclust, blockcluster). packages called directly, outputs used examples. done guide users without violating CRAN’s policy requiring packages examples. Removed license file suggested.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-093-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.3 (July 2025)","title":"Silhouette 0.9.3 (July 2025)","text":"Removed Citation file inst folder added WORDLIST . Modified Description Title DESCRIPTION file.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-092-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.2 (July 2025)","title":"Silhouette 0.9.2 (July 2025)","text":"Initial Stable Release first stable release Silhouette package, offering tools compute visualize silhouette widths evaluating clustering quality. supports crisp soft clustering outputs, along multi-way clustering (e.g., biclustering).","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"key-features-0-9-2","dir":"Changelog","previous_headings":"","what":"Key Features","title":"Silhouette 0.9.2 (July 2025)","text":"Silhouette() Computes silhouette widths using proximity matrices (dissimilarity similarity). Supports \"medoid\" \"pac\" normalization methods, fuzzy silhouette calculation via membership probabilities. softSilhouette() Tailored soft clustering. Transforms membership probabilities proximity measures (posterior probabilities, negative log-probabilities, raw distributions) silhouette computation. extSilhouette() Extends silhouette analysis multi-way clustering (e.g., biclustering triclustering) aggregating silhouette widths across modes, weighted observation counts. plotSilhouette() Creates detailed silhouette plots using ggplot2, options grayscale themes, cluster-wise summaries, labeled observations. Compatible outputs Silhouette, softSilhouette, popular packages like cluster factoextra. summary.Silhouette() Summarizes silhouette results, including average silhouette widths per cluster overall summary statistics.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"dependencies-0-9-2","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"Silhouette 0.9.2 (July 2025)","text":"Imports: dplyr, ggplot2, ggpubr, methods Suggests: proxy, ppclust, blockcluster, cluster, factoextra","code":""}]
