[{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"üß≠ Introduction","title":"Silhouette Package","text":"Silhouettes widely used validating clusters (Rousseeuw 1987). Extensions proposed soft clustering (Campello Hruschka 2006; Bhat Kapu Kiruthika 2024). recent developments also apply silhouettes neural networks (Raymaekers Rousseeuw 2022). new PAM algorithm introduced Van der Laan et al.¬†[Van der Laan, Pollard, Bryan (2003)](Schepers, Ceulemans, Van Mechelen 2008). Silhouette package provides flexible framework computing visualizing silhouette widths evaluate clustering quality crisp (hard) soft (fuzzy/probabilistic) clustering scenarios. Silhouette width, introduced Rousseeuw (1987), measures similar observation assigned cluster compared nearest neighboring cluster, values ranging -1 (poor clustering) 1 (well-separated clusters). package extends traditional silhouette methods : Supporting soft clustering membership probabilities (e.g., fuzzy clustering algorithms like ppclust::fcm). Implementing Simplified Silhouette method (Van der Laan et al., 2003) options medoid pac (Probability Alternative Cluster) calculations. Enabling multi-way clustering evaluation via extSilhouette() biclustering tensor clustering. Offering customizable visualization plotSilhouette(), including grayscale options detailed legends. Integrating clustering outputs packages like cluster (pam, clara, fanny) factoextra (eclust, hcut). vignette demonstrates key functionalities using iris dataset, showcasing crisp fuzzy silhouette calculations, visualization, extended silhouette analysis multi-way clustering.","code":""},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"available-functions","dir":"Articles","previous_headings":"üß≠ Introduction","what":"üì¶ Available Functions","title":"Silhouette Package","text":"Silhouette(): Computes silhouette widths crisp fuzzy clustering using proximity matrices. softSilhouette(): Computes silhouette widths soft clustering using membership probabilities. extSilhouette(): Calculates extended silhouette width multi-way clustering (e.g., biclustering). plot() plotSilhouette(): Visualizes silhouette widths bar plots, options grayscale legend customization. summary(): Summarizes average silhouette widths cluster sizes Silhouette class.","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"simplified-silhoutte-calculation","dir":"Articles","previous_headings":"üõ†Ô∏è Use Cases","what":"1. üìä Simplified Silhoutte Calculation","title":"Silhouette Package","text":"Compute silhouette widths k-means clustering iris dataset using dissimilarity matrix.  Output: summary() call displays table cluster sizes average silhouette widths, overall average silhouette width indicating clustering quality. plot() creates bar plot bar represents observation‚Äôs silhouette width, colored cluster, dashed line showing average silhouette width.","code":"library(proxy)   data(iris)   km <- kmeans(iris[, -5], centers = 3)   dist_matrix <- proxy::dist(iris[, -5], km$centers)   sil <- Silhouette(     prox_matrix = dist_matrix,     proximity_type = \"dissimilarity\",     method = \"medoid\"   ) #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   62        0.5546 #> 3       3   38        0.5950 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"   summary(sil) #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   62        0.5546 #> 3       3   38        0.5950   plot(sil)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"fuzzy-silhouette-with-fcm-clustering","dir":"Articles","previous_headings":"üõ†Ô∏è Use Cases","what":"2. üß† Fuzzy Silhouette with FCM Clustering","title":"Silhouette Package","text":"soft clustering, softSilhouette() uses membership probabilities (e.g., ppclust::fcm) compute fuzzy silhouette widths.  Output: plot shows silhouette widths observation, sorted cluster descending width, grayscale. legend displays cluster numbers without summary statistics (summary.legend = FALSE).","code":"library(ppclust)   data(iris)   fcm_result <- ppclust::fcm(iris[, 1:4], centers = 3)   sil_fuzzy <- softSilhouette(     prob_matrix = fcm_result$u,     prob_type = \"pp\",     method = \"pac\",     average = \"fuzzy\",     a = 2   ) #> ----------------------------------------------- #> Average fuzzy similarity pac silhouette: 0.8799  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   60        0.8080 #> 2       2   40        0.8083 #> 3       3   50        0.9565 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"   plot(sil_fuzzy, grayscale = TRUE, summary.legend = FALSE)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"scree-plot-for-optimal-number-of-clusters","dir":"Articles","previous_headings":"üõ†Ô∏è Use Cases","what":"3. üßÆ Scree Plot for Optimal Number of Clusters","title":"Silhouette Package","text":"scree plot helps identify optimal number clusters plotting average silhouette widths different k.  Output: scree plot shows average silhouette widths k = 2 7, helping identify number clusters highest silhouette width.","code":"library(ppclust)   library(ggplot2)   data(iris)   avg_sil_width <- numeric(6)   for (k in 2:7) {     sil <- Silhouette(       prox_matrix = \"d\",       proximity_type = \"dissimilarity\",       prob_matrix = \"u\",       clust_fun = fcm,       x = iris[, 1:4],       centers = k,       print.summary = FALSE,       sort = TRUE     )     avg_sil_width[k-1] <- summary(sil, print.summary = FALSE)$avg.width   }   df <- data.frame(k = 2:7, avg_sil_width = avg_sil_width)   df #>   k avg_sil_width #> 1 2     0.9567317 #> 2 3     0.9297577 #> 3 4     0.8758305 #> 4 5     0.9156653 #> 5 6     0.9125127 #> 6 7     0.8448206   ggplot(df, aes(x = k, y = avg_sil_width)) +     geom_line() +     geom_point() +     labs(x = \"Number of Clusters\", y = \"Average Silhouette Width\", title = \"Scree Plot for FCM Clustering\") +     theme_minimal()"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"silhouette-for-pam-clustering","dir":"Articles","previous_headings":"üõ†Ô∏è Use Cases","what":"4. üéõÔ∏è Silhouette for PAM Clustering","title":"Silhouette Package","text":"package supports clustering outputs cluster::pam, clara, fanny, factoextra::eclust, hcut.  Output: silhouette plot visualizes clustering quality pam, bars colored cluster sorted silhouette width.","code":"library(cluster)   data(iris)   pam_result <- pam(iris[, 1:4], k = 3)   plotSilhouette(pam_result, label = FALSE, grayscale = FALSE)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"extended-silhouette-for-multi-way-clustering","dir":"Articles","previous_headings":"üõ†Ô∏è Use Cases","what":"5. üî¨ Extended Silhouette for Multi-Way Clustering","title":"Silhouette Package","text":"extSilhouette() computes extended silhouette width multi-way clustering (e.g., biclustering) combining silhouette widths multiple modes. Output: extSilhouette() function returns extended silhouette width dimension table summarizing number observations average silhouette width mode (rows columns).","code":"library(blockcluster)   data(iris)   result <- coclusterContinuous(as.matrix(iris[, -5]), nbcocluster = c(3, 2)) #> Co-Clustering successfully terminated!   sil_mode1 <- softSilhouette(     prob_matrix = result@rowposteriorprob,     method = \"pac\",     print.summary = FALSE   )   sil_mode2 <- softSilhouette(     prob_matrix = result@colposteriorprob,     method = \"pac\",     print.summary = FALSE   )   ext_sil <- extSilhouette(     sil_list = list(sil_mode1, sil_mode2),     dim_names = c(\"Rows\", \"Columns\")   ) #> --------------------------- #> Extended silhouette: 0.9325  #> --------------------------- #>  #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1      Rows   150        0.9307 #> 2   Columns     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shrikrishna Bhat K. Author, maintainer, copyright holder. Kiruthika C. Author.","code":""},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhat S, C K (2025). Silhouette: Tools Silhouette Cluster Diagnostics. R package version 0.9.2, https://kskbhat.github.io/Silhouette/.","code":"@Manual{,   title = {Silhouette: Tools for Silhouette Cluster Diagnostics},   author = {Shrikrishna Bhat and Kiruthika C},   year = {2025},   note = {R package version 0.9.2},   url = {https://kskbhat.github.io/Silhouette/}, }"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"silhouette","dir":"","previous_headings":"","what":"Silhouette Package","title":"Silhouette Package","text":"R package silhouette-based diagnostics standard, soft, multi-way clustering. Silhouette diagnostics assess clustering quality using cohesion separation clusters. package implements silhouette widths various clustering setups, including support soft membership probabilities multi-way clustering structures.","code":""},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Silhouette Package","text":"can install released version Silhouette GitHub using: accepted CRAN, install via:","code":"# Install devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install from GitHub devtools::install_github(\"kskbhat/Silhouette\") install.packages(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Silhouette Package","text":"Usage main functions demonstrated package examples documentation. intro see vignette quick tour Silhouette, available can also access vignette Vignettes tab top navigation bar package website. information stable release updates, visit NEWS section available top navigation bar.","code":"vignette(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Silhouette Package","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53‚Äì65. https://doi.org/10.1016/0377-0427(87)90125-7 Van der Laan, M., Pollard, K., & Bryan, J. (2003). new partitioning around medoids algorithm. Journal Statistical Computation Simulation, 73(8), 575‚Äì584. https://doi.org/10.1080/0094965031000136012 Campello, R. J., & Hruschka, E. R. (2006). fuzzy extension silhouette width criterion cluster analysis. Fuzzy Sets Systems, 157(21), 2858‚Äì2875. https://doi.org/10.1016/j.fss.2006.07.006 Schepers, J., Ceulemans, E., & Van Mechelen, . (2008). Selecting among multi-mode partitioning models different complexities: comparison four model selection criteria. Journal Classification, 25(1), 67‚Äì85. https://doi.org/10.1007/s00357-008-9005-9 Kassambara, ., & Mundt, F. (2020). factoextra: Extract Visualize Results Multivariate Data Analyses. R package version 1.0.7. https://CRAN.R-project.org/package=factoextra Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332‚Äì1343. https://doi.org/10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3‚Äì4), 221‚Äì238. https://doi.org/10.1080/23737484.2024.2408534 Maechler, M., Rousseeuw, P., Struyf, ., Hubert, M., & Hornik, K. (2025). cluster: Cluster Analysis Basics Extensions. R package version 2.1.8.1. https://CRAN.R-project.org/package=cluster","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"Computes extended silhouette width multi-way clustering (e.g., biclustering, triclustering, n-mode tensor clustering) combining silhouette widths list Silhouette objects, representing one mode clustering. extended silhouette width weighted average average silhouette widths mode, weighted number observations mode's silhouette analysis. output object class extSilhouette.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"","code":"extSilhouette(sil_list, dim_names = NULL, print.summary = TRUE)"},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"sil_list list objects class \"Silhouette\", typically output Silhouette softSilhouette, object represents silhouette analysis one mode multi-way clustering (e.g., rows, columns, dimensions biclustering tensor clustering). dim_names optional character vector dimension names (e.g., c(\"Rows\", \"Columns\")). NULL, defaults \"Mode 1\", \"Mode 2\", etc. print.summary Logical; TRUE, prints summary extended silhouette width dimension table. Default TRUE.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"list class \"extSilhouette\" following components: ext_sil_width numeric scalar representing extended silhouette width. dim_table data frame columns dimension (e.g., \"Mode 1\", \"Mode 2\"), n_obs (number observations), avg_sil_width (average silhouette width mode).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"extended silhouette width computed : $$ ExS = \\frac{ \\sum (n_i \\cdot w_i) }{ \\sum n_i } $$ \\(n_i\\) number observations mode \\(\\) (derived nrow(x$widths)), \\(w_i\\) average silhouette width mode (x$avg.width). Silhouette object sil_list must contain non-empty widths data frame numeric avg.width value. Modes zero observations (\\(n_i = 0\\)) allowed, result undefined weighted average.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"Schepers, J., Ceulemans, E., & Van Mechelen, . (2008). Selecting among multi-mode partitioning models different complexities: comparison four model selection criteria. Journal Classification, 25(1), 67‚Äì85. doi:10.1007/s00357-008-9005-9","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Extended Silhouette Width for Multi-Way Clustering ‚Äî extSilhouette","text":"","code":"# Example using iris dataset with two modes data(iris) # \\donttest{ if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   library(blockcluster)   result <- coclusterContinuous(     as.matrix(iris[, -5]),     nbcocluster = c(3, 2)   ) } else {   message(\"Install 'blockcluster': install.packages('blockcluster')\") } #> Loading required package: rtkore #> Loading required package: Rcpp #>  #> Attaching package: 'rtkore' #> The following object is masked from 'package:Rcpp': #>  #>     LdFlags #> blockcluster version 4.5.5 loaded #>  #> ---------------- #> Copyright (C)  <MODAL team @INRIA,Lille & U.M.R. C.N.R.S. 6599 Heudiasyc, UTC> #> Please post questions and bugs at: <https://gforge.inria.fr/forum/forum.php?forum_id=11190&group_id=3679> #> Co-Clustering successfully terminated!   if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   sil_mode1 <- softSilhouette(     prob_matrix = result@rowposteriorprob,     method = \"pac\",     print.summary = FALSE   )   sil_mode2 <- softSilhouette(     prob_matrix = result@colposteriorprob,     method = \"pac\",     print.summary = FALSE   )    # Extended silhouette   ext_sil <- extSilhouette(list(sil_mode1, sil_mode2)) } #> --------------------------- #> Extended silhouette: 0.9325  #> --------------------------- #>  #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1    Mode 1   150        0.9307 #> 2    Mode 2     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\"     # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"Creates silhouette plot visualizing silhouette widths clustering results, bars colored cluster optional summary cluster statistics legend.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"","code":"plotSilhouette(x, label = FALSE, summary.legend = TRUE, grayscale = FALSE, ...)"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"x object class \"Silhouette\", typically output Silhouette softSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette cluster, factoextra packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. ... Additional arguments passed ggpar customizing plot (e.g., palette, legend).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"ggplot2 object representing Silhouette plot.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"Silhouette plot displays silhouette width (sil_width) observation, grouped cluster, bars sorted cluster descending silhouette width. summary.legend option adds cluster sizes average silhouette widths legend. function replica S3 method objects class \"Silhouette\", typically produced Silhouette softSilhouette functions package. also supports objects following classes, silhouette information extracted respective component: \"eclust\": Produced eclust factoextra package. \"hcut\": Produced hcut factoextra package. \"pam\": Produced pam cluster package. \"clara\": Produced clara cluster package. \"fanny\": Produced fanny cluster package. \"silhouette\": Produced silhouette cluster package. classes (\"eclust\", \"hcut\", \"pam\", \"clara\", \"fanny\", \"silhouette\"), users explicitly call plotSilhouette() (e.g., plotSilhouette(pam_result)) ensure correct method used, generic plot() may dispatch function objects.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53‚Äì65. doi:10.1016/0377-0427(87)90125-7","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Silhouette Analysis Results ‚Äî plotSilhouette","text":"","code":"# \\donttest{ data(iris)  # Crisp Silhouette with k-means out = kmeans(iris[,-5], 3) if (requireNamespace(\"proxy\", quietly = TRUE)) {   library(proxy)   dist = dist(iris[,-5], out$centers)   plot(Silhouette(dist)) } #>  #> Attaching package: 'proxy' #> The following objects are masked from 'package:stats': #>  #>     as.dist, dist #> The following object is masked from 'package:base': #>  #>     as.matrix #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   62        0.5546 #> 2       2   38        0.5950 #> 3       3   50        0.8592 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"           #' # Fuzzy Silhouette with ppclust::fcm if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   out_fuzzy <- Silhouette(     prox_matrix = \"d\",     proximity_type = \"dissimilarity\",     prob_matrix = \"u\",     clust_fun = ppclust::fcm,     x = iris[, 1:4],     centers = 3,     sort = TRUE   )   plot(out_fuzzy, summary.legend = FALSE, grayscale = TRUE) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") } #> ----------------------------------------------------- #> Average fuzzy dissimilarity medoid silhouette: 0.9298  #> -----------------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.9772 #> 2       2   40        0.8882 #> 3       3   60        0.8829 #>  #> Available attributes: #> [1] \"names\"          \"row.names\"      \"class\"          \"proximity_type\" #> [5] \"method\"           # Silhouette plot for pam clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   library(cluster)   pam_result <- pam(iris[, 1:4], k = 3)   plotSilhouette(pam_result) }   # Silhouette plot for clara clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   clara_result <- clara(iris[, 1:4], k = 3)   plotSilhouette(clara_result) }   # Silhouette plot for fanny clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   fanny_result <- fanny(iris[, 1:4], k = 3)   plotSilhouette(fanny_result) }   # Example using base silhouette() object if (requireNamespace(\"cluster\", quietly = TRUE)) {   sil <- silhouette(pam_result)   plotSilhouette(sil) }   # Silhouette plot for eclust clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   library(factoextra)   eclust_result <- eclust(iris[, 1:4], \"kmeans\", k = 3, graph = FALSE)   plotSilhouette(eclust_result) } #> Loading required package: ggplot2 #> Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa   # Silhouette plot for hcut clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   hcut_result <- hcut(iris[, 1:4], k = 3)   plotSilhouette(hcut_result) }  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"Computes silhouette width observation based clustering results, measuring similar observation cluster compared nearesh neighbour cluster. silhouette width ranges -1 1, higher values indicate better cluster cohesion separation.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"","code":"Silhouette(   prox_matrix,   proximity_type = c(\"dissimilarity\", \"similarity\"),   method = c(\"medoid\", \"pac\"),   prob_matrix = NULL,   a = 2,   sort = FALSE,   print.summary = TRUE,   clust_fun = NULL,   ... )  # S3 method for class 'Silhouette' plot(x, label = FALSE, summary.legend = TRUE, grayscale = FALSE, ...)  # S3 method for class 'Silhouette' summary(object, print.summary = TRUE, ...)"},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"prox_matrix numeric matrix rows represent observations columns represent proximity measures (e.g., distances similarities) clusters. Typically, membership dissimilarity matrix clustering results. clust_fun provided, prox_matrix name matrix component string (e.g., clust_fun = fcm ppclust package prox_matrix = \"d\"). proximity_type Character string specifying type proximity measure prox_matrix. Options \"similarity\" (higher values indicate closer proximity) \"dissimilarity\" (lower values indicate closer proximity). Defaults \"dissimilarity\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"medoid\". prob_matrix numeric matrix rows represent observations columns represent cluster membership probabilities, depending prob_type). clust_fun provided, prob_matrix name matrix component string (e.g., \"u\" fcm). NULL, fuzzy silhouette width calculated. Defaults NULL crisp silhouette. Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults TRUE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm. x object class \"Silhouette\", typically output Silhouette softSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette cluster, factoextra packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. object object class \"Silhouette\", typically output Silhouette softSilhouette function.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\"). ,  summary returns list containing: clus.avg.widths: named numeric vector average silhouette widths per cluster. avg.width: overall average silhouette width. sil.sum: data frame columns cluster, size, avg.sil.width summarizing cluster sizes average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"Silhouette function employs Simplified Silhouette method introduced Van der Laan et al. (2003), differing original silhouette method proposed Rousseeuw (1987). evaluates clustering quality using proximity matrix, denoted \\(\\Delta = [\\delta_{ik}]_{n \\times K}\\) dissimilarity measures \\(\\Delta' = [\\delta'_{ik}]_{n \\times K}\\) similarity measures. , \\(= 1, \\ldots, n\\) represents number observations, \\(k = 1, \\ldots, K\\) denotes number clusters. elements \\(\\delta_{ik}\\) indicate dissimilarity (e.g., distance) observation \\(\\) cluster \\(k\\), \\(\\delta'_{ik}\\) represent similarity observation \\(\\) cluster \\(k\\). silhouette width \\(S(x_i)\\) observation \\(\\) calculated based proximity type. dissimilarity measures: $$   S(x_i) = \\dfrac{(\\min_{k' \\neq k} \\delta_{ik'}) - \\delta_{ik}}{N(x_i)}, $$ \\(\\min_{k' \\neq k} \\delta_{ik'}\\) smallest dissimilarity cluster \\(k' \\neq k\\). similarity measures: $$   S(x_i) = \\dfrac{\\delta'_{ik} - (\\max_{k' \\neq k} \\delta'_{ik'})}{N(x_i)}, $$ \\(\\max_{k' \\neq k} \\delta'_{ik'}\\) largest similarity cluster, \\(N(x_i)\\) normaliser. Normaliser depends method argument: medoid: Dissimilarity: \\(\\max(\\delta_{ik}, \\min_{k' \\neq k} \\delta_{ik'})\\) Similarity:    \\(\\max(\\delta'_{ik}, \\max_{k' \\neq k} \\delta'_{ik'})\\) pac: Dissimilarity: \\(\\delta_{ik} + \\min_{k' \\neq k} \\delta_{ik'}\\) Similarity:    \\(\\delta'_{ik} + \\max_{k' \\neq k} \\delta'_{ik'}\\) prob_matrix NULL, function computes crisp overall silhouette index \\(CS\\) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i). $$ represents average silhouette width across observations, providing measure overall clustering quality. prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) represents membership probability observation \\(\\) cluster \\(k\\). fuzzy silhouette index \\(FS\\) calculated : $$   FS = \\frac{\\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha} S(x_i)}             {\\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha}}, $$ \\(\\alpha\\) (set argument ) controls weighting based membership differences. Higher \\(\\alpha\\) values emphasize observations confident cluster assignments, accounting uncertainty fuzzy clustering.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53‚Äì65. doi:10.1016/0377-0427(87)90125-7 Van der Laan, M., Pollard, K., & Bryan, J. (2003). new partitioning around medoids algorithm. Journal Statistical Computation Simulation, 73(8), 575‚Äì584. doi:10.1080/0094965031000136012 Campello, R. J., & Hruschka, E. R. (2006). fuzzy extension silhouette width criterion cluster analysis. Fuzzy Sets Systems, 157(21), 2858‚Äì2875. doi:10.1016/j.fss.2006.07.006 Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332‚Äì1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Width for Clustering ‚Äî Silhouette","text":"","code":"# Standard silhouette with k-means on iris dataset data(iris) # Crisp Silhouette with k-means out = kmeans(iris[,-5],3) if (requireNamespace(\"ppclust\", quietly = TRUE)) { library(proxy) dist = proxy::dist(iris[,-5],out$centers) silh_out = Silhouette(dist) plot(silh_out) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") } #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   38        0.5950 #> 3       3   62        0.5546 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"          # \\donttest{ # Scree plot for optimal clusters (2 to 7) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   avg_sil_width <- numeric(6)   for (k in 2:7) {     out <- Silhouette(       prox_matrix = \"d\",       proximity_type = \"dissimilarity\",       prob_matrix = \"u\",       clust_fun = ppclust::fcm,       x = iris[, 1:4],       centers = k,       print.summary = FALSE,       sort = TRUE     )     # Compute average silhouette width from widths     avg_sil_width[k-1] = summary(out,print.summary = FALSE)$avg.width   }   plot(avg_sil_width,     type = \"o\",     ylab = \"Overall Silhouette Width\",     xlab = \"Number of Clusters\",     main = \"Scree Plot\"   ) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") }  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"Computes silhouette widths soft clustering results interpreting cluster membership probabilities (transformations) proximity measures. Although originally designed evaluating clustering quality within method, adaptation allows heuristic comparison across soft clustering algorithms using average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"","code":"softSilhouette(   prob_matrix,   prob_type = c(\"pp\", \"nlpp\", \"pd\"),   method = c(\"pac\", \"medoid\"),   average = c(\"crisp\", \"fuzzy\"),   a = 2,   print.summary = TRUE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"prob_matrix numeric matrix rows represent observations columns represent cluster membership probabilities (transformed probabilities, depending prob_type). clust_fun provided, prob_matrix name matrix component string (e.g., \"u\" fcm). prob_type Character string specifying type transformation membership matrix considered proximilty matrix prob_matrix. Options : \"pp\" Posterior probabilities \\([\\gamma_{ik}]_{n \\times K}\\) (non-negative, typically summing 1 per row), treated similarities \"nlpp\" Negative log posterior probabilities \\([-\\ln\\gamma_{ik}]_{n \\times K}\\) (non-positive), treated dissimilarities. \"pd\" Probability distribution \\([\\gamma_{ik}/\\pi_{k}]_{n \\times K}\\) (normalized posterior probabilities relative cluster proportions \\(\\pi_{k}\\)), treated similarities. Defaults \"pp\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"pac\". average Character string specifying type average silhouette width calculation. Options \"crisp\" (simple average) \"fuzzy\" (weighted average based membership differences). Defaults \"crisp\". Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults TRUE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\").","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"Although silhouette method originally developed evaluating clustering structure within single result, implementation allows leveraging cluster membership probabilities soft clustering methods construct proximity-based silhouettes. silhouette widths can compared heuristically across different algorithms assess clustering quality. See doi:10.1080/23737484.2024.2408534  details.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332‚Äì1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Width for Soft Clustering Algorithms ‚Äî softSilhouette","text":"","code":"# \\donttest{ # Example with ppclust (if available) data(iris) # install.packages(\"ppclust\") if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm_result <- ppclust::fcm(iris[, 1:4], 3)   out_fcm <- softSilhouette(prob_matrix = fcm_result$u)   plot(out_fcm)   sfcm <- summary(out_fcm,print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------- #> Average similarity pac silhouette: 0.7541  #> -----------------------------------------  #>   cluster size avg.sil.width #> 1       1   40        0.7005 #> 2       2   50        0.9507 #> 3       3   60        0.6261 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"         if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm2_result <- ppclust::fcm2(iris[, 1:4], 3)   out_fcm2 <- softSilhouette(prob_matrix = fcm2_result$u)   plot(out_fcm2)   sfcm2 <- summary(out_fcm2,print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------- #> Average similarity pac silhouette: 0.4113  #> -----------------------------------------  #>   cluster size avg.sil.width #> 1       1   25        0.3623 #> 2       2   60        0.2666 #> 3       3   65        0.5636 #>  #> Available attributes: #> [1] \"names\"          \"class\"          \"row.names\"      \"proximity_type\" #> [5] \"method\"         # Compare average silhouette widths of fcm and fcm2 if (requireNamespace(\"ppclust\", quietly = TRUE)) {   cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\")   cat(\"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") } #> FCM average silhouette width: 0.7541271  #> FCM2 average silhouette width: 0.411275  # }"},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-092","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.2","title":"Silhouette 0.9.2","text":"Initial CRAN submission.","code":""}]
