[{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Silhouette Package","text":"Silhouette package provides comprehensive extensible framework computing visualizing silhouette widths assess clustering quality crisp (hard) soft (fuzzy/probabilistic) clustering settings. Silhouette width, originally introduced Rousseeuw (1987), quantifies similar observation assigned cluster relative closest alternative cluster. Scores range -1 (indicative poor clustering) 1 (excellent separation). Note: package use classical Rousseeuw (1987) calculation directly. Instead, generalizes extends silhouette methodology follows: Implements Simplified Silhouette method (Van der Laan, Pollard, Bryan 2003), options medoid pac (Probability Alternative Cluster, Raymaekers Rousseeuw (2022)) approaches. Provides soft clustering silhouettes based membership probabilities (Campello Hruschka 2006; Bhat Kapu Kiruthika 2024). Supports multi-way clustering evaluation via extSilhouette() (Schepers, Ceulemans, Van Mechelen 2008), enabling silhouette analysis biclustering higher-order tensor clustering. Offers customizable informative visualization plotSilhouette(), including grayscale options detailed cluster legends. package also integrates clustering results popular R packages cluster (silhouette, pam, clara, fanny) factoextra (eclust, hcut). vignette demonstrates essential features package using well-known iris dataset. showcases standard (crisp) fuzzy silhouette calculations, advanced plotting capabilities, extended silhouette metrics multi-way clustering scenarios.","code":""},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"available-functions","dir":"Articles","previous_headings":"Introduction","what":"Available Functions","title":"Silhouette Package","text":"Silhouette(): Calculates silhouette widths crisp fuzzy clustering, using user-supplied proximity matrices. plot() / plotSilhouette(): Visualizes silhouette widths sorted bar plots, offering grayscale flexible legend options clarity. summary(): Produces concise summaries average silhouette widths cluster sizes objects class Silhouette. softSilhouette(): Computes silhouette widths tailored soft clustering interpreting membership probabilities proximities. extSilhouette(): Derives extended silhouette widths multi-way clustering problems, biclustering tensor clustering.","code":""},{"path":[]},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"a--when-the-proximity-matrix-is-unknown-but-centers-of-clusters-are-known","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"a. When the Proximity Matrix is Unknown but Centers of Clusters Are Known","title":"Silhouette Package","text":"example demonstrates compute silhouette widths clustering result proximity (distance) matrix observations cluster centres unknown. workflow uses classic iris dataset k-means clustering. Steps: Clustering: Perform k-means clustering iris[, -5] 3 clusters. Note: kmeans output (km) include proximity matrix. Therefore, distances observations cluster centroids must computed separately. Compute Proximity Matrix: Create matrix distances observation cluster centroid using proxy::dist().  Customize Calculation: use Probability Alternative Cluster (PAC) method (penalised variation medoid method) return sorted output:  Accessing Silhouette Summaries: Silhouette function prints overall cluster-wise silhouette indices R console print.summary = TRUE, values directly stored returned object. extract programmatically, use summary() function:","code":"data(iris) km <- kmeans(iris[, -5], centers = 3) library(proxy) dist_matrix <- proxy::dist(iris[, -5], km$centers) sil <- Silhouette(dist_matrix) head(sil) #>   cluster neighbor sil_width #> 1       1        2 0.9586603 #> 2       1        2 0.8682865 #> 3       1        2 0.8831417 #> 4       1        2 0.8465006 #> 5       1        2 0.9455979 #> 6       1        2 0.7848442 summary(sil) #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664  #> -----------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   62        0.5546 #> 3       3   38        0.5950 plot(sil) sil_pac <- Silhouette(dist_matrix, method = \"pac\", sort = TRUE) head(sil_pac) #>    cluster neighbor sil_width #> 8        1        2 0.9611009 #> 40       1        2 0.9329754 #> 1        1        2 0.9206029 #> 18       1        2 0.9182947 #> 50       1        2 0.9158517 #> 41       1        2 0.8993130 summary(sil_pac) #> -------------------------------------------- #> Average dissimilarity pac silhouette: 0.5376  #> --------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 plot(sil_pac) s <- summary(sil_pac,print.summary = TRUE) #> -------------------------------------------- #> Average dissimilarity pac silhouette: 0.5376  #> --------------------------------------------  #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 # summary table s$sil.sum #>   cluster size avg.sil.width #> 1       1   50        0.7603 #> 2       2   62        0.4136 #> 3       3   38        0.4468 # cluster wise silhouette widths s$clus.avg.widths #>         1         2         3  #> 0.7602929 0.4136203 0.4468368 # Overall average silhouette width s$avg.width #> [1] 0.5375927"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"b--when-the-proximity-matrix-is-known","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"b. When the Proximity Matrix Is Known","title":"Silhouette Package","text":"section describes compute silhouette widths proximity matrix—representing distances observations cluster centers—readily available part clustering model output. example makes use fuzzy c-means clustering via ppclust package classic iris dataset. Steps: Step 1: Perform Fuzzy C-Means Clustering Apply fuzzy c-means clustering iris[, -5] create three clusters. Step 2: Compute Silhouette Widths Using Proximity Matrix output object fm contains distance matrix fm$d representing proximities observation cluster center, can directly fed Silhouette() function. - Alternative: Directly Use Clustering Function clust_fun streamline workflow, can let Silhouette() function internally handle clustering silhouette calculation supplying name distance matrix (\"d\") desired clustering function: approach eliminates explicit step extracting proximity matrix, making analyses concise. Summary: proximity matrix provided directly clustering algorithm (fuzzy c-means), silhouette widths can calculated one step. convenience, Silhouette() function accepts proximity matrix clustering function, single command completes clustering computes silhouettes. greatly simplifies process methods built-proximity outputs, supporting rapid reproducible evaluation clustering separation quality.","code":"library(ppclust) data(iris) fm <- ppclust::fcm(x = iris[, -5], centers = 3) sil_fm <- Silhouette(fm$d) plot(sil_fm) sil_fcm <- Silhouette(prox_matrix = \"d\", clust_fun = fcm, x = iris[, -5], centers = 3) plot(sil_fcm)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"c--calculation-of-fuzzy-silhouette-index-for-soft-clustering-algorithms","dir":"Articles","previous_headings":"Use Cases > 1. Simplified Silhouette Calculation","what":"c. Calculation of Fuzzy Silhouette Index for Soft Clustering Algorithms","title":"Silhouette Package","text":"section explains compute fuzzy silhouette index proximity matrix (distances observations cluster centers) membership probability matrix available. process demonstrated fuzzy c-means clustering ppclust package applied classic iris dataset. Steps: Step 1: Perform Fuzzy C-Means Clustering Apply fuzzy c-means clustering feature columns iris dataset, specifying three clusters: Step 2: Compute Fuzzy Silhouette Widths Using Proximity Membership Matrices clustering output fm1 contains distance matrix (fm1$d) membership probability matrix (fm1$u). can directly passed Silhouette() function compute fuzzy silhouette widths: - Alternative: Use Clustering Function Inline clust_fun even streamlined workflow, Silhouette() function can internally manage clustering silhouette calculations accepting names distance probability components (\"d\" \"u\") along clustering function:  approach removes need manually extract matrices clustering result, improving code efficiency reproducibility. Summary: proximity membership probability matrices directly available clustering algorithm (fuzzy c-means), fuzzy silhouette widths can calculated efficiently single step. Silhouette() function supports integrated workflow running clustering silhouette calculations internally provided relevant function argument names. functionality facilitates concise, reproducible pipeline validating quality separation soft clustering results.","code":"data(iris) fm1 <- ppclust::fcm(x = iris[, -5], centers = 3) sil_fm1 <- Silhouette(prox_matrix = fm1$d, prob_matrix = fm1$u) plot(sil_fm1) sil_fcm1 <- Silhouette(prox_matrix = \"d\", prob_matrix = \"u\", clust_fun = fcm, x = iris[, -5], centers = 3) plot(sil_fcm1)"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"comparing-two-soft-clustering-algorithms-using-the-soft-silhouette-function","dir":"Articles","previous_headings":"Use Cases","what":"2. Comparing Two Soft Clustering Algorithms Using the Soft Silhouette Function","title":"Silhouette Package","text":"often desirable assess compare clustering quality different soft clustering algorithms dataset. soft silhouette index offers principled, internal measure purpose, naturally incorporates probabilistic nature soft clusters provides single value summarizing cluster compactness separation. Example: Evaluating Fuzzy C-Means vs. Alternative Soft Clustering Algorithm Suppose wish compare performance two fuzzy clustering algorithms—Fuzzy C-Means (FCM) variant (e.g., FCM2)—using softSilhouette() function. Steps: Step 1: Perform Clustering Algorithms Fit soft clustering algorithm dataset (e.g., iris[, 1:4]): Step 2: Compute Soft Silhouette Index Result Use membership probability matrices produced algorithm:   Step 3: Summarize Compare Average Silhouette Widths Extract overall average silhouette width clustering result: higher average silhouette width indicates clustering compact well-separated clusters. Interpretation & Guidance Interpret Index: algorithm yielding higher average soft silhouette width considered produce better clustering, balances cluster cohesion separation accounting uncertainty inherent soft assignments. Practical Application: method generic; two soft clustering results (limited FCM/FCM2) can compared effectively, provided can extract membership probability matrix. Flexible Integration: softSilhouette() function also allows different silhouette calculation methods transformations (prob_type = \"nlpp\" negative log-probabilities), supporting deeper comparisons aligned methodological framework. Summary: Comparing average soft silhouette widths different soft clustering algorithms provides objective, data-driven basis determining method produces meaningful, well-defined clusters probabilistic settings. approach harmonizes easily classic fuzzy clustering advanced algorithms.","code":"data(iris)  # FCM clustering fcm_result <- ppclust::fcm(iris[, 1:4], 3)  # FCM2 clustering fcm2_result <- ppclust::fcm2(iris[, 1:4], 3) # Soft silhouette for FCM sil_fcm <- softSilhouette(prob_matrix = fcm_result$u) plot(sil_fcm) # Soft silhouette for FCM2 sil_fcm2 <- softSilhouette(prob_matrix = fcm2_result$u) plot(sil_fcm2) sfcm <- summary(sil_fcm, print.summary = FALSE) sfcm2 <- summary(sil_fcm2, print.summary = FALSE)  cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\") #> FCM average silhouette width: 0.7541271 cat(\"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") #> FCM2 average silhouette width: 0.411275"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"scree-plot-for-optimal-number-of-clusters","dir":"Articles","previous_headings":"Use Cases","what":"3. Scree Plot for Optimal Number of Clusters","title":"Silhouette Package","text":"scree plot (also called “elbow plot” “reverse elbow plot”) practical tool identifying best number clusters unsupervised learning. , silhouette width calculated different values k (number clusters). resulting plot provides visual indication optimal cluster count highlighting increasing k yields marginal improvements average silhouette width. Steps: Step 1: Compute Average Silhouette Widths Varying Cluster Counts Run silhouette analysis across range possible cluster numbers (e.g., 2 7). k, use Silhouette() function calculate silhouette widths, extract average silhouette width summary. Step 2: Create Interpret Scree Plot Plot number clusters computed average silhouette widths:  optimal number clusters often suggested “elbow” “reverse elbow”—point increases k lead diminishing excessive improvements silhouette width. visual guide valuable assessing clustering structure data. Note: Silhouette softSilhouette functions can used generate scree plots optimal cluster selection. theoretical background additional diagnostic options soft clustering, see Bhat Kapu Kiruthika (2024). Summary: scree plot provides intuitive graphical summary assist choosing optimal number clusters plotting average silhouette width versus number clusters considered. integrated use Silhouette(), softSilhouette(), use clust_fun summary functions makes analysis straightforward efficient crisp fuzzy clustering frameworks. method encourages reproducible, objective approach cluster selection unsupervised analysis.","code":"data(iris) avg_sil_width <- numeric(6) for (k in 2:7) {   sil_out <- Silhouette(     prox_matrix = \"d\",     proximity_type = \"dissimilarity\",     prob_matrix = \"u\",     clust_fun = ppclust::fcm,     x = iris[, 1:4],     centers = k,     print.summary = FALSE,     sort = TRUE   )   avg_sil_width[k - 1] <- summary(sil_out, print.summary = FALSE)$avg.width } plot(avg_sil_width,   type = \"o\",   ylab = \"Overall Silhouette Width\",   xlab = \"Number of Clusters\",   main = \"Silhouette Scree Plot\" )"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"visualizing-silhouette-analysis-results-with-plotsilhouette","dir":"Articles","previous_headings":"Use Cases","what":"4. Visualizing Silhouette Analysis Results with plotSilhouette()","title":"Silhouette Package","text":"Efficient visualization silhouette widths essential interpreting diagnosing clustering quality. plotSilhouette() function provides flexible extensible tool plotting silhouette results various clustering algorithms, supporting hard (crisp) soft (fuzzy) partitions. Key Features: - Accepts outputs wide range clustering methods: Silhouette, softSilhouette, well clustering objects cluster (pam, clara, fanny, base silhouette) factoextra (eclust, hcut). - Offers detailed legends summarizing average silhouette widths cluster sizes. - Supports customizable color palettes, including grayscale, option label observations x-axis. Illustrative Use Cases Code Crisp Silhouette Visualization (e.g., k-means clustering):   Crisp Silhouette Cluster Algorithms (PAM, CLARA, FANNY):    Base silhouette object:  factoextra::hcut/eclust clusterings:   Fuzzy (Soft) Silhouette Visualization (e.g., fuzzy c-means ppclust):  Customization: Grayscale, Detailed Legends, Observation Labels:    Practical Guidance: - clustering output classes supported generic plot() function, always use plotSilhouette() explicitly ensure correct informative visualization. - function automatically sorts silhouette widths within clusters, displays average silhouette (dashed line), provides detailed cluster summaries legend. Summary:plotSilhouette() brings unified, publication-ready visualization capabilities assessing crisp fuzzy clustering glance. broad compatibility, detailed legends, grayscale labeling options empower users gain deeper insights clustering structure, facilitating clear diagnosis reporting exploratory formal statistical workflows.","code":"data(iris)   km_out <- kmeans(iris[, -5], 3)   dist_mat <- proxy::dist(iris[, -5], km_out$centers)   sil_obj <- Silhouette(dist_mat)   plot(sil_obj)                   # S3 method auto-dispatch plotSilhouette(sil_obj)         # explicit call (identical output) library(cluster) pam_result <- pam(iris[, 1:4], k = 3) plotSilhouette(pam_result) # for cluster::pam object clara_result <- clara(iris[, 1:4], k = 3) plotSilhouette(clara_result) fanny_result <- fanny(iris[, 1:4], k = 3) plotSilhouette(fanny_result) sil_base <- silhouette(pam_result) plotSilhouette(sil_base) library(factoextra) eclust_result <- eclust(iris[, 1:4], \"kmeans\", k = 3, graph = FALSE) plotSilhouette(eclust_result) hcut_result <- hcut(iris[, 1:4], k = 3) plotSilhouette(hcut_result) data(iris) fcm_out <- ppclust::fcm(iris[, 1:4], 3) sil_fuzzy <- Silhouette(   prox_matrix = \"d\", prob_matrix = \"u\", clust_fun = fcm,   x = iris[, 1:4], centers = 3, sort = TRUE ) plot(sil_fuzzy, summary.legend = FALSE, grayscale = TRUE) plotSilhouette(sil_fuzzy, grayscale = TRUE) # Use grayscale palette plotSilhouette(sil_fuzzy, summary.legend = TRUE) # Include size + avg silhouette in legend plotSilhouette(sil_fuzzy, label = TRUE) # Label bars with row index"},{"path":"https://kskbhat.github.io/Silhouette/articles/Silhouette.html","id":"extended-silhouette-analysis-for-multi-way-clustering","dir":"Articles","previous_headings":"Use Cases","what":"5. Extended Silhouette Analysis for Multi-Way Clustering","title":"Silhouette Package","text":"extSilhouette() function enables silhouette-based evaluation multi-way clustering scenarios, biclustering tensor clustering, aggregating silhouette indices mode (e.g., rows, columns) single summary metric. approach allows rigorously assess overall clustering structure partitioning data along multiple dimensions. Workflow: Step 1: Apply Multi-Way Clustering Fit biclustering algorithm data—example, use blockcluster::coclusterContinuous() jointly cluster rows columns iris dataset. Step 2: Compute Silhouette Widths Mode dimension (e.g., rows columns), calculate silhouette widths using membership probability matrices (result@rowposteriorprob rows, result@colposteriorprob columns) via softSilhouette() function: (One can use Silhouette() also calculate relevent proximity measure available, consistency make sure objects list derived method arguments.) Step 3: Aggregate Silhouette Results extSilhouette() Combine silhouette analyses mode passing list extSilhouette(). Optionally, provide descriptive dimension names: Summary: extSilhouette() function returns: - overall extended silhouette width—weighted average summarizing clustering quality across modes. - dimension statistics table, reporting number observations average silhouette width mode (e.g., rows, columns). Note: distance matrix available output biclustering algorithm, can compute individual mode silhouettes using Silhouette(). results can combined extSilhouette() enable direct comparison clustering solutions across multiple biclustering algorithms, facilitating objective model assessment (Kapu C 2025). methodology provides concise interpretable assessment complex clustering models conventional one-dimensional indices insufficient.","code":"library(blockcluster) data(iris) result <- coclusterContinuous(as.matrix(iris[, -5]), nbcocluster = c(3, 2)) #> Co-Clustering successfully terminated! sil_mode1 <- softSilhouette(   prob_matrix = result@rowposteriorprob,   method = \"pac\",   print.summary = FALSE ) sil_mode2 <- softSilhouette(   prob_matrix = result@colposteriorprob,   method = \"pac\",   print.summary = FALSE ) ext_sil <- extSilhouette(   sil_list = list(sil_mode1, sil_mode2),   dim_names = c(\"Rows\", \"Columns\"),   print.summary = TRUE ) #> --------------------------- #> Extended silhouette: 0.6273  #> --------------------------- #>  #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1      Rows   150        0.6174 #> 2   Columns     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shrikrishna Bhat K. Author, maintainer, copyright holder. Kiruthika C. Author.","code":""},{"path":"https://kskbhat.github.io/Silhouette/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhat K S, C K (2025). Silhouette: Proximity Measure Based Diagnostics Standard, Soft, Multi-Way Clustering. R package version 0.9.4, https://kskbhat.github.io/Silhouette/.","code":"@Manual{,   title = {Silhouette: Proximity Measure Based Diagnostics for Standard, Soft, and Multi-Way Clustering},   author = {Shrikrishna {Bhat K} and Kiruthika C},   year = {2025},   note = {R package version 0.9.4},   url = {https://kskbhat.github.io/Silhouette/}, }"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"silhouette-","dir":"","previous_headings":"","what":"Silhouette Package","title":"Silhouette Package","text":"R package silhouette-based diagnostics standard, soft, multi-way clustering. Silhouette diagnostics assess clustering quality using cohesion separation clusters. package implements silhouette widths various clustering setups, including support soft membership probabilities multi-way clustering structures.","code":""},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Silhouette Package","text":"can install released version Silhouette GitHub using: accepted CRAN, install via:","code":"# Install devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install from GitHub devtools::install_github(\"kskbhat/Silhouette\") install.packages(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Silhouette Package","text":"Usage main functions demonstrated package examples documentation. intro, see vignette quick tour Silhouette, available can access vignette User Guide tab top navigation bar package’s website.","code":"vignette(\"Silhouette\")"},{"path":"https://kskbhat.github.io/Silhouette/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Silhouette Package","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65. doi:10.1016/0377-0427(87)90125-7 Van der Laan, M., Pollard, K., & Bryan, J. (2003). new partitioning around medoids algorithm. Journal Statistical Computation Simulation, 73(8), 575–584. doi:10.1080/0094965031000136012 Campello, R. J., & Hruschka, E. R. (2006). fuzzy extension silhouette width criterion cluster analysis. Fuzzy Sets Systems, 157(21), 2858–2875. doi:10.1016/j.fss.2006.07.006 Schepers, J., Ceulemans, E., & Van Mechelen, . (2008). Selecting among multi-mode partitioning models different complexities: comparison four model selection criteria. Journal Classification, 25(1), 67–85. doi:10.1007/s00357-008-9005-9 Kassambara, ., & Mundt, F. (2020). factoextra: Extract Visualize Results Multivariate Data Analyses. R package version 1.0.7. doi:10.32614/CRAN.package.factoextra Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332–1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3–4), 221–238. doi:10.1080/23737484.2024.2408534 Maechler, M., Rousseeuw, P., Struyf, ., Hubert, M., & Hornik, K. (2025). cluster: Cluster Analysis Basics Extensions. R package version 2.1.8.1. doi:10.32614/CRAN.package.cluster Bhat Kapu, S., & Kiruthika, C. (2025). Block Probabilistic Distance Clustering: Unified Framework Evaluation. PREPRINT (Version 1) available Research Square. doi:10.21203/rs.3.rs-6973596/v1","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"Computes extended silhouette width multi-way clustering (e.g., biclustering, triclustering, n-mode tensor clustering) combining silhouette widths list Silhouette objects, representing one mode clustering. extended silhouette width weighted average average silhouette widths mode, weighted number observations mode's silhouette analysis. output object class extSilhouette.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"","code":"extSilhouette(sil_list, dim_names = NULL, print.summary = FALSE)"},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"sil_list list objects class \"Silhouette\", typically output Silhouette softSilhouette, object represents silhouette analysis one mode multi-way clustering (e.g., rows, columns, dimensions biclustering tensor clustering). dim_names optional character vector dimension names (e.g., c(\"Rows\", \"Columns\")). NULL, defaults \"Mode 1\", \"Mode 2\", etc. print.summary Logical; TRUE, prints summary extended silhouette width dimension table. Default FALSE.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"list class \"extSilhouette\" following components: ext_sil_width numeric scalar representing extended silhouette width. dim_table data frame columns dimension (e.g., \"Mode 1\", \"Mode 2\"), n_obs (number observations), avg_sil_width (average silhouette width mode).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"extended silhouette width computed : $$ ExS = \\frac{ \\sum (n_i \\cdot w_i) }{ \\sum n_i } $$ \\(n_i\\) number observations mode \\(\\) (derived nrow(x$widths)), \\(w_i\\) average silhouette width mode (x$avg.width). Silhouette object sil_list must contain non-empty widths data frame numeric avg.width value. Modes zero observations (\\(n_i = 0\\)) allowed, result undefined weighted average. consistency make sure Silhouette objects derived method arguments.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"Schepers, J., Ceulemans, E., & Van Mechelen, . (2008). Selecting among multi-mode partitioning models different complexities: comparison four model selection criteria. Journal Classification, 25(1), 67–85. doi:10.1007/s00357-008-9005-9 Bhat Kapu, S., & Kiruthika, C. (2025). Block Probabilistic Distance Clustering: Unified Framework Evaluation. PREPRINT (Version 1) available Research Square. doi:10.21203/rs.3.rs-6973596/v1","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/extSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Extended Silhouette Width for Multi-Way Clustering — extSilhouette","text":"","code":"# Example using iris dataset with two modes data(iris) # \\donttest{ if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   library(blockcluster)   result <- coclusterContinuous(     as.matrix(iris[, -5]),     nbcocluster = c(3, 2)   ) } else {   message(\"Install 'blockcluster': install.packages('blockcluster')\") } #> Loading required package: rtkore #> Loading required package: Rcpp #>  #> Attaching package: 'rtkore' #> The following object is masked from 'package:Rcpp': #>  #>     LdFlags #> blockcluster version 4.5.5 loaded #>  #> ---------------- #> Copyright (C)  <MODAL team @INRIA,Lille & U.M.R. C.N.R.S. 6599 Heudiasyc, UTC> #> Please post questions and bugs at: <https://gforge.inria.fr/forum/forum.php?forum_id=11190&group_id=3679> #> Co-Clustering successfully terminated!   if (requireNamespace(\"blockcluster\", quietly = TRUE)) {   sil_mode1 <- softSilhouette(     prob_matrix = result@rowposteriorprob,     method = \"pac\")   sil_mode2 <- softSilhouette(     prob_matrix = result@colposteriorprob,     method = \"pac\"     )    # Extended silhouette   ext_sil <- extSilhouette(list(sil_mode1, sil_mode2),print.summary = TRUE) } #> --------------------------- #> Extended silhouette: 0.9325  #> --------------------------- #>  #> Dimension Summary: #>   dimension n_obs avg_sil_width #> 1    Mode 1   150        0.9307 #> 2    Mode 2     4        1.0000 #>  #> Available components: #> [1] \"ext_sil_width\" \"dim_table\"     # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Silhouette Analysis Results — plotSilhouette","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Creates silhouette plot visualizing silhouette widths clustering results, bars colored cluster optional summary cluster statistics legend.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"","code":"plotSilhouette(x, label = FALSE, summary.legend = TRUE, grayscale = FALSE, ...)"},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"x object class \"Silhouette\", typically output Silhouette softSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette cluster, factoextra packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. ... Additional arguments passed ggpar customizing plot (e.g., palette, legend).","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"ggplot2 object representing Silhouette plot.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Silhouette plot displays silhouette width (sil_width) observation, grouped cluster, bars sorted cluster descending silhouette width. summary.legend option adds cluster sizes average silhouette widths legend. function replica S3 method objects class \"Silhouette\", typically produced Silhouette softSilhouette functions package. also supports objects following classes, silhouette information extracted respective component: \"eclust\": Produced eclust factoextra package. \"hcut\": Produced hcut factoextra package. \"pam\": Produced pam cluster package. \"clara\": Produced clara cluster package. \"fanny\": Produced fanny cluster package. \"silhouette\": Produced silhouette cluster package. classes (\"eclust\", \"hcut\", \"pam\", \"clara\", \"fanny\", \"silhouette\"), users explicitly call plotSilhouette() (e.g., plotSilhouette(pam_result)) ensure correct method used, generic plot() may dispatch function objects.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65. doi:10.1016/0377-0427(87)90125-7","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/plotSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Silhouette Analysis Results — plotSilhouette","text":"","code":"# \\donttest{ data(iris)  # Crisp Silhouette with k-means out <- kmeans(iris[, -5], 3) if (requireNamespace(\"proxy\", quietly = TRUE)) {   library(proxy)   dist <- dist(iris[, -5], out$centers)   plot(Silhouette(dist)) } #>  #> Attaching package: 'proxy' #> The following objects are masked from 'package:stats': #>  #>     as.dist, dist #> The following object is masked from 'package:base': #>  #>     as.matrix   #' # Fuzzy Silhouette with ppclust::fcm if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   out_fuzzy <- Silhouette(     prox_matrix = \"d\",     proximity_type = \"dissimilarity\",     prob_matrix = \"u\",     clust_fun = ppclust::fcm,     x = iris[, 1:4],     centers = 3,     sort = TRUE   )   plot(out_fuzzy, summary.legend = FALSE, grayscale = TRUE) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") }   # Silhouette plot for pam clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   library(cluster)   pam_result <- pam(iris[, 1:4], k = 3)   plotSilhouette(pam_result) }   # Silhouette plot for clara clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   clara_result <- clara(iris[, 1:4], k = 3)   plotSilhouette(clara_result) }   # Silhouette plot for fanny clustering if (requireNamespace(\"cluster\", quietly = TRUE)) {   fanny_result <- fanny(iris[, 1:4], k = 3)   plotSilhouette(fanny_result) }   # Example using base silhouette() object if (requireNamespace(\"cluster\", quietly = TRUE)) {   sil <- silhouette(pam_result)   plotSilhouette(sil) }   # Silhouette plot for eclust clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   library(factoextra)   eclust_result <- eclust(iris[, 1:4], \"kmeans\", k = 3, graph = FALSE)   plotSilhouette(eclust_result) } #> Loading required package: ggplot2 #> Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa   # Silhouette plot for hcut clustering if (requireNamespace(\"factoextra\", quietly = TRUE)) {   hcut_result <- hcut(iris[, 1:4], k = 3)   plotSilhouette(hcut_result) }  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Computes silhouette width observation based clustering results, measuring similar observation cluster compared nearest neighbor cluster. silhouette width ranges -1 1, higher values indicate better cluster cohesion separation.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"","code":"Silhouette(   prox_matrix,   proximity_type = c(\"dissimilarity\", \"similarity\"),   method = c(\"medoid\", \"pac\"),   prob_matrix = NULL,   a = 2,   sort = FALSE,   print.summary = FALSE,   clust_fun = NULL,   ... )  # S3 method for class 'Silhouette' plot(x, label = FALSE, summary.legend = TRUE, grayscale = FALSE, ...)  # S3 method for class 'Silhouette' summary(object, print.summary = TRUE, ...)"},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"prox_matrix numeric matrix rows represent observations columns represent proximity measures (e.g., distances similarities) clusters. Typically, membership dissimilarity matrix clustering results. clust_fun provided, prox_matrix name matrix component string (e.g., clust_fun = fcm ppclust package prox_matrix = \"d\"). proximity_type Character string specifying type proximity measure prox_matrix. Options \"similarity\" (higher values indicate closer proximity) \"dissimilarity\" (lower values indicate closer proximity). Defaults \"dissimilarity\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"medoid\". prob_matrix numeric matrix rows represent observations columns represent cluster membership probabilities, depending prob_type). clust_fun provided, prob_matrix name matrix component string (e.g., \"u\" fcm). NULL, fuzzy silhouette width calculated. Defaults NULL crisp silhouette. Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. sort Logical; TRUE, sorts output widths data frame cluster descending silhouette width. Defaults FALSE. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults TRUE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm. x object class \"Silhouette\", typically output Silhouette softSilhouette function. Also supports objects classes eclust, hcut, pam, clara, fanny, silhouette cluster, factoextra packages. classes, explicitly call plotSilhouette() generate plot. label Logical; TRUE, x-axis labeled observation row indices input data titled \"Row Index\". Defaults FALSE. summary.legend Logical; TRUE, prints summary average silhouette widths sizes cluster legend (\"Cluster (Size): Width\"). FALSE, legend shows cluster numbers. Defaults TRUE. grayscale Logical; TRUE, plot uses grayscale color palette clusters. FALSE, uses default specified color palette. Defaults FALSE. object object class \"Silhouette\", typically output Silhouette softSilhouette function.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\"). ,  summary returns list containing: clus.avg.widths: named numeric vector average silhouette widths per cluster. avg.width: overall average silhouette width. sil.sum: data frame columns cluster, size, avg.sil.width summarizing cluster sizes average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Silhouette function implements Simplified Silhouette method introduced Van der Laan, Pollard, & Bryan (2003), adapts generalizes classic silhouette method Rousseeuw (1987). Clustering quality evaluated using proximity matrix, denoted \\(\\Delta = [\\delta_{ik}]_{n \\times K}\\) dissimilarity measures \\(\\Delta' = [\\delta'_{ik}]_{n \\times K}\\) similarity measures. , \\(= 1, \\ldots, n\\) indexes observations, \\(k = 1, \\ldots, K\\) indexes clusters. \\(\\delta_{ik}\\) represents dissimilarity (e.g., distance) observation \\(\\) cluster \\(k\\), \\(\\delta'_{ik}\\) represents similarity values. silhouette width \\(S(x_i)\\) observation \\(\\) depends proximity type: dissimilarity measures: $$   S(x_i) = \\frac{ \\min_{k' \\neq k} \\delta_{ik'} - \\delta_{ik} }{ N(x_i) } $$ similarity measures: $$   S(x_i) = \\frac{ \\delta'_{ik} - \\max_{k' \\neq k} \\delta'_{ik'} }{ N(x_i) } $$ \\(N(x_i)\\) normalizing factor defined method. Choice method: normalizer \\(N(x_i)\\) selected according method argument. method names reference origins may used proximity matrix, exclusively certain clustering algorithms: medoid (Van der Laan et al., 2003): Dissimilarity: \\(\\max(\\delta_{ik}, \\min_{k' \\neq k} \\delta_{ik'})\\) Similarity:    \\(\\max(\\delta'_{ik}, \\max_{k' \\neq k} \\delta'_{ik'})\\) pac (Raymaekers & Rousseeuw, 2022): Dissimilarity: \\(\\delta_{ik} + \\min_{k' \\neq k} \\delta_{ik'}\\) Similarity:    \\(\\delta'_{ik} + \\max_{k' \\neq k} \\delta'_{ik'}\\) Note: \"medoid\" \"pac\" options reflect normalization formula—requirement use PAM algorithm posterior/ensemble methods—general scoring approaches. methods can applied suitable proximity matrix, including proximity, similarity, dissimilarity matrices derived classification algorithms. flexibility means silhouette indices may computed assess group separation clusters groups formed classification-derived proximities, unsupervised clustering. prob_matrix NULL, crisp silhouette index (\\(CS\\)) : $$   CS = \\frac{1}{n} \\sum_{=1}^{n} S(x_i) $$ summarizing overall clustering quality. prob_matrix provided, denoted \\(\\Gamma = [\\gamma_{ik}]_{n \\times K}\\), \\(\\gamma_{ik}\\) representing probability observation \\(\\) belonging cluster \\(k\\), fuzzy silhouette index (\\(FS\\)) used: $$   FS = \\frac{ \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha} S(x_i) }{ \\sum_{=1}^{n} \\left( \\gamma_{ik} - \\max_{k' \\neq k} \\gamma_{ik'} \\right)^{\\alpha} } $$ \\(\\alpha\\) (argument) controls emphasis confident assignments.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"Rousseeuw, P. J. (1987). Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65. doi:10.1016/0377-0427(87)90125-7 Van der Laan, M., Pollard, K., & Bryan, J. (2003). new partitioning around medoids algorithm. Journal Statistical Computation Simulation, 73(8), 575–584. doi:10.1080/0094965031000136012 Campello, R. J., & Hruschka, E. R. (2006). fuzzy extension silhouette width criterion cluster analysis. Fuzzy Sets Systems, 157(21), 2858–2875. doi:10.1016/j.fss.2006.07.006 Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332–1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/Silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Widths, Summary, and Plot for Clustering Results — Silhouette","text":"","code":"# Standard silhouette with k-means on iris dataset data(iris) # Crisp Silhouette with k-means out <- kmeans(iris[, -5], 3) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(proxy)   dist <- proxy::dist(iris[, -5], out$centers)   silh_out <- Silhouette(dist,print.summary = TRUE)   plot(silh_out) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") } #> ----------------------------------------------- #> Average dissimilarity medoid silhouette: 0.6664 #> ----------------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   50        0.8592 #> 2       2   38        0.5950 #> 3       3   62        0.5546 #>  #> Available attributes: names, class, row.names, proximity_type, method  # \\donttest{ # Scree plot for optimal clusters (2 to 7) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   library(ppclust)   avg_sil_width <- numeric(6)   for (k in 2:7) {     out <- Silhouette(       prox_matrix = \"d\",       proximity_type = \"dissimilarity\",       prob_matrix = \"u\",       clust_fun = ppclust::fcm,       x = iris[, 1:4],       centers = k,       sort = TRUE     )     # Compute average silhouette width from widths     avg_sil_width[k - 1] <- summary(out, print.summary = FALSE)$avg.width   }   plot(avg_sil_width,     type = \"o\",     ylab = \"Overall Silhouette Width\",     xlab = \"Number of Clusters\",     main = \"Scree Plot\"   ) } else {   message(\"Install 'ppclust': install.packages('ppclust')\") }  # }"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Computes silhouette widths soft clustering results interpreting cluster membership probabilities (transformations) proximity measures. Although originally designed evaluating clustering quality within method, adaptation allows heuristic comparison across soft clustering algorithms using average silhouette widths.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"","code":"softSilhouette(   prob_matrix,   prob_type = c(\"pp\", \"nlpp\", \"pd\"),   method = c(\"pac\", \"medoid\"),   average = c(\"crisp\", \"fuzzy\"),   a = 2,   print.summary = FALSE,   clust_fun = NULL,   ... )"},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"prob_matrix numeric matrix rows represent observations columns represent cluster membership probabilities (transformed probabilities, depending prob_type). clust_fun provided, prob_matrix name matrix component string (e.g., \"u\" fcm). prob_type Character string specifying type transformation membership matrix considered proximity matrix prob_matrix. Options : \"pp\" Posterior probabilities \\([\\gamma_{ik}]_{n \\times K}\\) (non-negative, typically summing 1 per row), treated similarities \"nlpp\" Negative log posterior probabilities \\([-\\ln\\gamma_{ik}]_{n \\times K}\\) (non-positive), treated dissimilarities. \"pd\" Probability distribution \\([\\gamma_{ik}/\\pi_{k}]_{n \\times K}\\) (normalized posterior probabilities relative cluster proportions \\(\\pi_{k}\\)), treated similarities. Defaults \"pp\". method Character string specifying silhouette calculation method. Options \"pac\" (Probability Alternative Cluster) \"medoid\". Defaults \"pac\". average Character string specifying type average silhouette width calculation. Options \"crisp\" (simple average) \"fuzzy\" (weighted average based membership differences). Defaults \"crisp\". Numeric value controlling fuzzifier weight scaling fuzzy silhouette averaging. Higher values increase emphasis strong membership differences. Must positive. Defaults 2. print.summary Logical; TRUE, prints summary table average silhouette widths sizes cluster. Defaults FALSE. clust_fun Optional S3 S4 function object function character string specifying clustering function produces proximity measure matrix. example, fcm \"fcm\". provided, prox_matrix must name matrix component clustering output (e.g., \"d\" fcm proximity_type = \"dissimilarity\"). Defaults NULL. ... Additional arguments passed clust_fun, x,centers fcm.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"data frame class \"Silhouette\" containing cluster assignments, nearest neighbor clusters, silhouette widths observation, weights (fuzzy clustering). object includes following attributes: proximity_type proximity type used (\"similarity\" \"dissimilarity\"). method silhouette calculation method used (\"medoid\" \"pac\").","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Although silhouette method originally developed evaluating clustering structure within single result, implementation allows leveraging cluster membership probabilities soft clustering methods construct proximity-based silhouettes. silhouette widths can compared heuristically across different algorithms assess clustering quality. See doi:10.1080/23737484.2024.2408534  details.","code":""},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"Raymaekers, J., & Rousseeuw, P. J. (2022). Silhouettes quasi residual plots neural nets tree-based classifiers. Journal Computational Graphical Statistics, 31(4), 1332–1343. doi:10.1080/10618600.2022.2050249 Bhat Kapu, S., & Kiruthika. (2024). density-based silhouette diagnostics soft clustering algorithms. Communications Statistics: Case Studies, Data Analysis Applications, 10(3-4), 221-238. doi:10.1080/23737484.2024.2408534","code":""},{"path":[]},{"path":"https://kskbhat.github.io/Silhouette/reference/softSilhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Silhouette Width for Soft Clustering Algorithms — softSilhouette","text":"","code":"# \\donttest{ # Compare two soft clustering algorithms using softSilhouett # Example: FCM vs. FCM2 on iris data, using average silhouette width as a criterion data(iris) if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm_result <- ppclust::fcm(iris[, 1:4], 3)   out_fcm <- softSilhouette(prob_matrix = fcm_result$u,print.summary = TRUE)   plot(out_fcm)   sfcm <- summary(out_fcm, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------- #> Average similarity pac silhouette: 0.7541 #> ----------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   40        0.7005 #> 2       2   50        0.9507 #> 3       3   60        0.6261 #>  #> Available attributes: names, class, row.names, proximity_type, method if (requireNamespace(\"ppclust\", quietly = TRUE)) {   fcm2_result <- ppclust::fcm2(iris[, 1:4], 3)   out_fcm2 <- softSilhouette(prob_matrix = fcm2_result$u,print.summary = TRUE)   plot(out_fcm2)   sfcm2 <- summary(out_fcm2, print.summary = FALSE) } else {   message(\"Install 'ppclust' to run this example: install.packages('ppclust')\") } #> ----------------------------------------- #> Average similarity pac silhouette: 0.4113 #> ----------------------------------------- #>  #>   cluster size avg.sil.width #> 1       1   25        0.3623 #> 2       2   60        0.2666 #> 3       3   65        0.5636 #>  #> Available attributes: names, class, row.names, proximity_type, method # Compare average silhouette widths of fcm and fcm2 if (requireNamespace(\"ppclust\", quietly = TRUE)) {   cat(\"FCM average silhouette width:\", sfcm$avg.width, \"\\n\")   cat(\"FCM2 average silhouette width:\", sfcm2$avg.width, \"\\n\") } #> FCM average silhouette width: 0.7541271  #> FCM2 average silhouette width: 0.411275  # }"},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-094-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.4 (July 2025)","title":"Silhouette 0.9.4 (July 2025)","text":"Clarified description PAC (Probability Alternative Cluster) method documentation citing original authors (Author, Year). Removed usage installed.packages() package code replaced robust CRAN-compliant approach, following suggested practices. user-facing functions now include argument print.summary, controls whether summary details printed. argument behaves similarly (verbose) cat(...) now defaults FALSE. Messages using message() included example sections suggest installation optional packages (e.g., ppclust, blockcluster). packages called directly, outputs used examples. done guide users without violating CRAN’s policy requiring packages examples. Removed license file suggested.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-093-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.3 (July 2025)","title":"Silhouette 0.9.3 (July 2025)","text":"Removed Citation file inst folder added WORDLIST . Modified Description Title DESCRIPTION file.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"silhouette-092-july-2025","dir":"Changelog","previous_headings":"","what":"Silhouette 0.9.2 (July 2025)","title":"Silhouette 0.9.2 (July 2025)","text":"Initial Stable Release first stable release Silhouette package, offering tools compute visualize silhouette widths evaluating clustering quality. supports crisp soft clustering outputs, along multi-way clustering (e.g., biclustering).","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"key-features-0-9-2","dir":"Changelog","previous_headings":"","what":"Key Features","title":"Silhouette 0.9.2 (July 2025)","text":"Silhouette() Computes silhouette widths using proximity matrices (dissimilarity similarity). Supports \"medoid\" \"pac\" normalization methods, fuzzy silhouette calculation via membership probabilities. softSilhouette() Tailored soft clustering. Transforms membership probabilities proximity measures (posterior probabilities, negative log-probabilities, raw distributions) silhouette computation. extSilhouette() Extends silhouette analysis multi-way clustering (e.g., biclustering triclustering) aggregating silhouette widths across modes, weighted observation counts. plotSilhouette() Creates detailed silhouette plots using ggplot2, options grayscale themes, cluster-wise summaries, labeled observations. Compatible outputs Silhouette, softSilhouette, popular packages like cluster factoextra. summary.Silhouette() Summarizes silhouette results, including average silhouette widths per cluster overall summary statistics.","code":""},{"path":"https://kskbhat.github.io/Silhouette/news/index.html","id":"dependencies-0-9-2","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"Silhouette 0.9.2 (July 2025)","text":"Imports: dplyr, ggplot2, ggpubr, methods Suggests: proxy, ppclust, blockcluster, cluster, factoextra","code":""}]
